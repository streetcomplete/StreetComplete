# Cinnabar is a classic look and should be your go-to for general mapping applications.
# Give OpenStreetMap data a refined basemap skin using the Tangram graphics library and
# Mapzen's versatile Vector Tiles.
#
# This style is a High Road influenced evolution of the Traditional style Stamen created
# for Mapzen's Open Android app in 2014. Please use and adapt the open source scene file
# in your own projects!
#
# Authors: Nathaniel V. Kelso, Geraldine Sarmiento
# Read more: https://github.com/tangrams/cinnabar-style
#

import:
    - themes/color-cinnabar.yaml
    - themes/label-5.yaml
    - themes/cinnabar-icons.yaml

global:
    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_mapzen_api_key: ''     # set this value to your Mapzen API key

    #ux/ui
    ux_language: false             # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_fallback: false    # l10n language code, trusting OSM in v0.10 tiles, fixed in v1.0 tiles
    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }
    ux_language_text_source_left: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:left:'+global.ux_language]) || (global.ux_language_fallback && feature['name:left:'+global.ux_language_fallback]) || feature['name:left'];
        }
    ux_language_text_source_right: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:right:'+global.ux_language]) || (global.ux_language_fallback && feature['name:right:'+global.ux_language_fallback]) || feature['name:right'];
        }
    ux_language_text_source_boundary_lines_left_right:
        left: global.ux_language_text_source_left
        right: global.ux_language_text_source_right
    ux_language_text_source_boundary_lines: |
        function() {
            var right = (global.ux_language && feature['name:right:'+global.ux_language]) || (global.ux_language_fallback && feature['name:right:'+global.ux_language_fallback]) || feature['name:right'];
            var left = (global.ux_language && feature['name:left:'+global.ux_language]) || (global.ux_language_fallback && feature['name:left:'+global.ux_language_fallback]) || feature['name:left'];
            if( right && left ) {
                //if( right.includes(' ') || left.includes(' ') ) {
                    return left + " - " + right;
                //} else {
                //    return right + '\n' + left;
                //}
            } else {
                return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
            }
        }
    ux_language_text_source_short: |
        function() {
            return (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
        }
    ux_language_text_source_short_proxy_name: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var short = (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
            return short ? name : '';
        }
    ux_language_text_source_abbreviation: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var abbrev = (global.ux_language && feature['name:abbreviation:'+global.ux_language]) || (global.ux_language_fallback && feature['name:abbreviation:'+global.ux_language_fallback]) || feature['name:abbreviation'];
            return abbrev || name;
        }
    ux_language_text_source_iata: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.iata) {
                if (name) {
                    return name + ' (' + feature.iata + ')';
                }
                else {
                    return feature.iata;
                }
            } else {
                return name;
            }
        }
    ux_language_text_source_ocean: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join('  ');
        }
    ux_language_text_source_sea: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_continent_stacked_only: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split(' ').join('\n');
        }
    ux_language_text_source_continent: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_piste_advanced: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆ ' + name) : '◆';
        }
    ux_language_text_source_piste_expert: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆◆ ' + name) : '◆◆';
        }
    ux_language_text_source_building_and_address: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (name && feature.addr_housenumber) {
                return name + '\n' + feature.addr_housenumber;
            } else {
                return name;
            }
        }

    # To facilitate data visualizations several recommended sort orders are provided
    #
    # Your classic raster map overlay.
    # Over all line and polygon features.
    # Under map labels (icons and text), under UI elements
    # (like routeline and search result pins).
    sdk_order_over_everything_but_text_0: 490
    sdk_order_over_everything_but_text_1: 491
    sdk_order_over_everything_but_text_2: 492
    sdk_order_over_everything_but_text_3: 493
    sdk_order_over_everything_but_text_4: 494
    sdk_order_over_everything_but_text_5: 495
    sdk_order_over_everything_but_text_6: 496
    sdk_order_over_everything_but_text_7: 497
    sdk_order_over_everything_but_text_8: 498
    sdk_order_over_everything_but_text_9: 499
    #
    # Your classic "underlay"
    # Under roads. Above borders, water, landuse, and earth.
    sdk_order_under_roads_0: 290
    sdk_order_under_roads_1: 291
    sdk_order_under_roads_2: 292
    sdk_order_under_roads_3: 293
    sdk_order_under_roads_4: 294
    sdk_order_under_roads_5: 295
    sdk_order_under_roads_6: 296
    sdk_order_under_roads_7: 297
    sdk_order_under_roads_8: 298
    sdk_order_under_roads_9: 299
    #
    # Under water.
    # Above earth and most landuse.
    sdk_order_under_water_0: 190
    sdk_order_under_water_1: 191
    sdk_order_under_water_2: 192
    sdk_order_under_water_3: 193
    sdk_order_under_water_4: 194
    sdk_order_under_water_5: 195
    sdk_order_under_water_6: 196
    sdk_order_under_water_7: 197
    sdk_order_under_water_8: 198
    sdk_order_under_water_9: 199
    #
    # Under everything.
    # Tip: disable earth layer.
    sdk_order_under_everything_0: 0
    sdk_order_under_everything_1: 1
    sdk_order_under_everything_2: 2
    sdk_order_under_everything_3: 3
    sdk_order_under_everything_4: 4
    sdk_order_under_everything_5: 5
    sdk_order_under_everything_6: 6
    sdk_order_under_everything_7: 7
    sdk_order_under_everything_8: 8
    sdk_order_under_everything_9: 9
    #
    # TRANSIT OVERLAY
    # should default to "auto", with SDK overriding it to true or false,
    # or app logic sets other booleans that triggers auto behavior later
    sdk_transit_overlay: false
    #
    # SHIELDS
    sdk_shield_color: black
    sdk_shield_text_color: white
    #
    # enable interactivity for key features
    sdk_interactive: true
    #
    #
    #
    # internal variables not recommended for external SDK use
    #
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    #

sources:
    mapzen:
        type: MVT #GeoJSON, MVT, TopoJSON
        #binary MVT format is used in StreetComplete as it is recommended for mobile
        #https://mapzen.com/documentation/vector-tiles/)
        # https has been causing problems for certain Android devices - https://github.com/westnordost/StreetComplete/issues/175
        url:  http://tile.mapzen.com/mapzen/vector/v1/512/all/{z}/{x}/{y}.mvt
        #url: '//tile.dev.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson'
        #url:  //localhost:8080/vector/all/{z}/{x}/{y}.json
        tile_size: 512
        max_zoom: 16

#    # Only enable this for local debug, should not be enabled for prod (app inserts these at runtime)
#    # These are all in San Francisco, California
#    #
#    # Current location gem
#    mz_current_location:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/9e9588228b0a604264a2/raw/b28be49bea0b7feb859eb65b588c28e9fee5ae2c/map.geojson
#    # Route line
#    mz_route_line:
#        type: GeoJSON
#        # sf to ny
#        # url: https://gist.githubusercontent.com/anonymous/30c6c1a75c168d91d90c/raw/92bfe55e622766d250b1f2f5d17bdc7c26acb956/map.geojson
#        # local sf trip
#        url: https://gist.githubusercontent.com/anonymous/9a610ebda6fe4be7bccc/raw/8d217e43f2412d48d01534ba115f1e42dac72e68/map.geojson
#    # Dashed route line
#    mz_dash_line:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/d73b851c64c3e5fbfc2754aa32f44c10/raw/938ae435776e176919c4797bed1465a92e403ef3/map.geojson
#    # Transit route line
#    mz_route_line_transit:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/71ae88cbc6d62c4d141ecd6a61060050/raw/2254bbc18243f5dc609e663a580c9412a7447936/map.geojson
#    # Pin at start of route
#    mz_route_start:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/5262969cb7549ea69221/raw/be03f233fa323d9b5cf50ef1d8e89a1faa3750f1/map.geojson
#    # Pin at end of route
#    mz_route_destination:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/dbae9635dfe46796490e/raw/df55c318635a7d91b309ed40754d4738a292fd38/map.geojson
#    # Arrow for current route location
#    mz_route_location:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/36613092be6e2aa004fd/raw/f753d13069425199e1dea1b449ef67d723f6510e/map.geojson
#    # Dots for transit stops in route preview
#    mz_route_transit_stop:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/b9f16bca4a804f50faf71277d52ee4ab/raw/db13e4e765fa1ac8844b8ba02f4a0f66fe772907/map.geojson
#    # Pins showing search result locations
#    mz_search_result:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/57dc09eeb120919f76de/raw/43426217da3c2bae0522dc4257aaa61e4df3981e/map.geojson
#    # Default point styling (SDK)
#    mz_default_point:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/16324c771edfce45be0721390389b878/raw/7dbaebf17da7da8562e6c6f8768bc8cff83efa88/map.geojson
#    # Default shield styling (SDK)
#    mz_default_shield:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/nvkelso/3c08dba1eced4d01df98c1a9a7801162/raw/d83a5a396fc7b22309b8ca89336ad2dcfff6c452/map.geojson
#    # Default line styling (SDK)
#    mz_default_line:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/26f4e8b6b34b2617b5d5533d89decb39/raw/df8e180ab4f7f19448014dccc4a755f7cfa20003/map.geojson
#    # Default polygon styling (SDK)
#    mz_default_polygon:
#        type: GeoJSON
#        url: https://gist.githubusercontent.com/anonymous/88235c795bb44b8c45150bdd5561f947/raw/71d4fab97b6513833bf1a589167119e6169ef86d/map.geojson

cameras:
    isometric:
        type: isometric
        axis: [0, .1] # very small building extrusion

styles:
    dashed:
        base: lines
        dash: [1.25, 1.25]
        dash_background_color: [0.749,0.749,0.749]

    dashed_big:
        base: lines
        dash: [2.0, 1.0]
        dash_background_color: [0.749,0.749,0.749]

    dashed_steps:
        base: lines
        dash: [0.25, 0.25]
        dash_background_color: [0.749,0.749,0.749]

    railway_dash:
        base: lines
        dash: [2.0, 0.25]
        dash_background_color: [0.850,0.850,0.850]

    dots-lines:
        base: lines
        lighting: false
        texcoords: true
        blend: overlay
        shaders:
            defines:
                dotSize: .1
            blocks:
                color: |
                    vec2 st = fract(v_texcoord.xy);
                    st -= .5;
                    color.a = 1.- step(dotSize, dot(st,st)*2.);

    lines_transparent:
        base: lines
        blend: overlay
    outline_transparent:
        base: lines
        blend: overlay
    polygons_transparent:
        base: polygons
        blend: overlay
    text-blend-order:
        base: text
        blend_order: 1
    ux-route-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-route-line-dash-overlay:
        base: lines
        blend: overlay
        blend_order: 0
        dash: [2, 1]
    ux-transit-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-location-gem-overlay:
        base: points
        texture: mapzen_icon_library
        blend: overlay
        blend_order: 2
    ux-icons-overlay:
        base: points
        texture: mapzen_icon_library
        blend: overlay
        blend_order: 3
    sdk-point-overlay:
        base: points
        texture: mapzen_icon_library
        blend: overlay
        blend_order: 3
    sdk-shield-overlay:
        base: points
        texture: mapzen_icon_library
        blend: overlay
        blend_order: 3
    sdk-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    sdk-polygon-overlay:
        base: polygons
        blend: overlay
        blend_order: 0

fonts:
    Open Sans:
        - weight: 300 # Light
          url: fonts/OpenSans-Light.woff
        - weight: normal # Regular
          url: fonts/OpenSans-Regular.woff
        - weight: normal # Regular
          style: italic
          url: fonts/OpenSans-Italic.woff
        - weight: 600 # Semi Bold
          url: fonts/OpenSans-Semibold.woff
        - weight: 600 # Semi Bold
          style: italic
          url: fonts/OpenSans-SemiboldItalic.woff
        - weight: bold
          url: fonts/OpenSans-Bold.woff
    Montserrat:
        - weight: normal
          #url: https://fonts.gstatic.com/s/montserrat/v7/zhcz-_WihjSQC0oHJ9TCYL3hpw3pgy2gAi-Ip7WPMi0.woff
          url: fonts/Montserrat-Regular.woff
        - weight: 500
          #url: https://fonts.gstatic.com/s/montserrat/v10/BYPM-GE291ZjIXBWrtCweqLy3K7m9xj_O5xwN3SdQNs.woff
          url: fonts/Montserrat-Medium.woff
        - weight: 700
          #url: https://fonts.gstatic.com/s/montserrat/v10/IQHow_FEYlDC4Gzy_m8fcnbFhgvWbfSbdVg11QabG8w.woff
          url: fonts/Montserrat-Bold.woff

scene:
    background:
        color: global.earth1

layers:
    # Map overlays for styling the server response (using special source layer names) for route line, current location, and search result pins
    mz_route_line:
        data: { source: mz_route_line }
        draw:
            ux-route-line-overlay:
                interactive: global.sdk_interactive
                color: black
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_route_line_dash:
        data: { source: mz_dash_line }
        draw:
            ux-route-line-dash-overlay:
                interactive: global.sdk_interactive
                color: '#06a6d4'
                order: 500
                width: [[2,2px],[5,2.5px],[11,3px],[16,7px],[17,9px]]
    mz_route_line_transit:
        data: { source: mz_route_line_transit }
        draw:
            ux-transit-line-overlay:
                # each transit route segment could be a different "line" each with it's own color
                # but some transit lines don't define a color, in those cases default to blue
                # and since the color is coming from Transit.land they call it "color" instead of "colour"
                interactive: global.sdk_interactive
                color: function() { return feature.color || '#06a6d4'; }
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_current_location_gem:
        data: { source: mz_current_location }
        draw:
            ux-location-gem-overlay:
                interactive: global.sdk_interactive
                sprite: ux-current-location
                size: 36px
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_location:
        data: { source: mz_route_location }
        draw:
            ux-location-gem-overlay:
                interactive: global.sdk_interactive
                sprite: ux-route-arrow
                size: [60px,60px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_start:
        data: { source: mz_route_start }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                priority: 1
                sprite: ux-route-start
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_stop:
        data: { source: mz_route_stop }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                priority: 1
                sprite: ux-route-stop
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_transit_stop:
        data: { source: mz_route_transit_stop }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-transit-stop
                size: [15px,15px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_search_result:
        data: { source: mz_search_result }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
        inactive:
            filter: { state: inactive }
            draw:
                ux-icons-overlay:
                    sprite: ux-search-inactive
    mz_dropped_pin:
        data: { source: mz_dropped_pin }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }

    # Used by the SDK to place point, line, and polygon overlays on the map
    mz_default_point:
        data: { source: mz_default_point }
        draw:
            sdk-point-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_default_shield:
        data: { source: mz_default_shield }
        draw:
            sdk-shield-overlay:
                interactive: global.sdk_interactive
                sprite: |
                    function() {
                        if( feature.ref ) {
                            return ('sdk_shield-' + feature.ref.length + 'char');
                        } else {
                            return ('sdk_shield-' + feature.name.length + 'char');
                        }
                    }
                sprite_default: sdk_shield-1char
                color: global.sdk_shield_color
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
                text:
                    # offset: [0px, -1px]
                    text_source: |
                        function() {
                            if( feature.ref ) {
                                return feature.ref;
                            } else {
                                return feature.name;
                            }
                        }
                    anchor: center
                    font:
                        family: Montserrat
                        fill: global.sdk_shield_text_color
                        style: bold
                        size: [[7,7px],[12,8px],[16,11px]]

        width_1char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 1);
                    } else {
                        return (feature.name.length === 1);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
        width_2char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 2);
                    } else {
                        return (feature.name.length === 2);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
        width_3char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 3);
                    } else {
                        return (feature.name.length === 3);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
        width_4char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 4);
                    } else {
                        return (feature.name.length === 4);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
        width_5char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 5);
                    } else {
                        return (feature.name.length === 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
        # this is kinda a hack
        width_longggggg:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length > 5);
                    } else {
                        return (feature.name.length > 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    visible: false
    mz_default_line:
        data: { source: mz_default_line }
        draw:
            sdk-line-overlay:
                interactive: global.sdk_interactive
                color: black
                order: 503
                width: 3px
    mz_default_polygon:
        data: { source: mz_default_polygon }
        draw:
            sdk-polygon-overlay:
                interactive: global.sdk_interactive
                color: [0.,0.,0.,0.4]  #'#06b1e2'
                order: 501
            sdk-line-overlay:
                color: black
                order: 502
                width: 0px


    # Basemap styling
    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                order: global.feature_order
                color: global.water1
            lines:
                order: global.feature_order

        water_boundaries-ocean:
            filter: { boundary: true, kind: ocean, $zoom: { min: 10 } }
            draw:
                lines:
                    color: global.water1_o
                    width: [[10, 1px], [12, 2px]]
                    join: round

        water-not-ocean:
            filter: { not: { kind: ocean } }
            inland-water:
                filter:
                    all:
                        - kind: [lake, water, riverbank, reservoir, playa, swimming_pool]
                    any:
                        # limit show smaller landuse areas to higher zooms
                        - { $zoom: { min: 0 },  area: { min: 40000000000 } }
                        - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                        # some weird natural earth scale set transition
                        - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                        - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                        - { $zoom: { min: 5 },  area: { min: 700000000 } }
                        - { $zoom: { min: 6 },  area: { min: 500000000 } }
                        - { $zoom: { min: 7 },  area: { min: 160000000 } }
                        - { $zoom: { min: 8 },  area: { min: 40000000 } }
                        - { $zoom: { min: 9 },  area: { min: 10000000 } }
                        - { $zoom: { min: 10 }, area: { min: 8000000 } }
                        - { $zoom: { min: 11 }, area: { min: 2000000 } }
                        - { $zoom: { min: 12 }, area: { min: 200000 } }
                        - { $zoom: { min: 13 }, area: { min: 100000 } }
                        - { $zoom: { min: 14 }, area: { min: 2000 } }
                        - { $zoom: { min: 15 } }
                draw:
                    polygons:
                        color: global.water1
            other-water-areas:
                filter: { not: { kind: [lake, water, reservoir, playa] }, $zoom: { min: 11 }, area: { min: 100 } }
                draw:
                    polygons:
                        color: global.water1

            playas:
                filter: { kind: playa }
                draw:
                    polygons:
                        order: function() { return feature.sort_rank + 1; }
                        color: global.water2

            water_boundaries-not-ocean:
                filter:
                    all:
                        - boundary: true
                        - not: { kind: ocean }
                        - $zoom: { min: 14 }
                    any:
                        # limit show smaller landuse areas to higher zooms
                        - { $zoom: { min: 0 },  area: { min: 40000000000 } }
                        - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                        # some weird natural earth scale set transition
                        - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                        - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                        - { $zoom: { min: 5 },  area: { min: 700000000 } }
                        - { $zoom: { min: 6 },  area: { min: 500000000 } }
                        - { $zoom: { min: 7 },  area: { min: 160000000 } }
                        - { $zoom: { min: 8 },  area: { min: 40000000 } }
                        - { $zoom: { min: 9 },  area: { min: 10000000 } }
                        - { $zoom: { min: 10 }, area: { min: 8000000 } }
                        - { $zoom: { min: 11 }, area: { min: 2000000 } }
                        - { $zoom: { min: 12 }, area: { min: 200000 } }
                        - { $zoom: { min: 13 }, area: { min: 100000 } }
                        - { $zoom: { min: 14 }, area: { min: 2000 } }
                        - { $zoom: { min: 15 } }
                draw:
                    lines:
                        order: 240
                        color: global.water2_o
                        width: [[14, 1.0px], [16, 1.5px], [18, 2m]]
                        join: round
            river:
                filter: { kind: [river, canal, stream, dam, ditch, drain], $zoom: { min: 13 }, not: { is_tunnel: true } }
                draw:
                    lines:
                        color: global.water2_o
                        order: global.feature_order_down_1
                        width: [[13, 0.5px], [16, 1.5px], [18, 4m]]
                        join: round
                intermittent:
                    filter:
                        any:
                            - intermittent: [true]
                            - kind: drain
                    draw:
                        lines:
                            visible: false
                        dots-lines:
                            order: function() { return feature.sort_rank; }
                            color: global.water2_o
                            width: [[10, 0px], [11, 0.5px], [14, 2px], [16,4px]]


        water-labels:
            filter:
                all:
                    - name: true
                    - function() { return global.text_visible_water_labels; }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    visible: false
                    font:
                        fill: global.text_fill_water
                        family: global.text_font_family
                        weight: normal

            ocean-labels:
                filter:
                    all:
                        - $zoom: { min: 1 }
                        - kind: [ocean]
                draw:
                    text-blend-order:
                        visible: global.text_visible_water_labels
                        text_source: global.ux_language_text_source_ocean
                        text_wrap: false
                        priority: 1
                        font:
                            size: [[1, 8px], [2, 10px], [3, 13px], [4, 16px]]
                            transform: uppercase
                            style: italic

            sea-labels:
                filter:
                    all:
                        - $zoom: { min: 4 }
                        - kind: [sea]
                draw:
                    text-blend-order:
                        visible: global.text_visible_water_labels
                        text_source: global.ux_language_text_source_sea
                        text_wrap: false
                        priority: 2
                        font:
                            fill: global.text_fill_water
                            size: [[4, 8px],[6, 11px],[8, 14px]]
                            transform: uppercase
                            style: italic

            water-area-labels:
                filter:
                    all:
                        - name: true
                        - $geometry: point
                        - not: { kind: [riverbank, dock, playa] }
                        - area: true
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 5 },  area: { min: 10000000000 } }
                        - { $zoom: { min: 6 },  area: { min: 5000000000 } }
                        - { $zoom: { min: 7 },  area: { min: 400000000 } }
                        - { $zoom: { min: 8 },  area: { min: 200000000 } }
                        - { $zoom: { min: 9 },  area: { min: 100000000 } }
                        - { $zoom: { min: 10 }, area: { min: 100000000 } }
                        - { $zoom: { min: 11 }, area: { min: 10000000 } }
                        - { $zoom: { min: 12 }, area: { min: 2000000 } }
                        - { $zoom: { min: 13 }, area: { min: 1000000 } }
                        - { $zoom: { min: 14 }, area: { min: 500000 } }
                        - { $zoom: { min: 15 }, area: { min: 100000 } }
                        - { $zoom: { min: 15 }, area: { min: 50000 } }
                        - { $zoom: { min: 16 }, area: { min: 20000 } }
                        - { $zoom: { min: 17 } }
                default-label-text:
                    draw:
                        text-blend-order:
                            visible: global.text_visible_water_labels
                            font:
                                style: italic
                                size: 12px
                lakes-labels:
                    filter:
                        $zoom: { min: 4 }
                    draw:
                        text-blend-order:
                            font:
                                size: [[5, 9px], [8, 12px]]

            playa-labels:
                filter:
                    all:
                        - name: true
                        - $geometry: point
                        - kind: playa
                        - area: true
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 5 },  area: { min: 10000000000 } }
                        - { $zoom: { min: 6 },  area: { min: 5000000000 } }
                        - { $zoom: { min: 7 },  area: { min: 400000000 } }
                        - { $zoom: { min: 8 },  area: { min: 200000000 } }
                        - { $zoom: { min: 9 },  area: { min: 100000000 } }
                        - { $zoom: { min: 10 }, area: { min: 100000000 } }
                        - { $zoom: { min: 11 }, area: { min: 10000000 } }
                        - { $zoom: { min: 12 }, area: { min: 2000000 } }
                        - { $zoom: { min: 13 }, area: { min: 1000000 } }
                        - { $zoom: { min: 14 }, area: { min: 500000 } }
                        - { $zoom: { min: 15 }, area: { min: 100000 } }
                        - { $zoom: { min: 15 }, area: { min: 50000 } }
                        - { $zoom: { min: 16 }, area: { min: 20000 } }
                        - { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        visible: global.text_visible_water_labels
                        font:
                            fill: global.text_fill2
                            style: italic
                            size: 12px
                            stroke: { color: global.text_stroke_water, width: 3px }

            water-line-labels:
                filter:
                    all:
                        - $geometry: line
                        - kind: [river,canal,stream,dam,ditch,drain]
                        - $zoom: { min: 14 }
                draw:
                    text-blend-order:
                        visible: global.text_visible_water_labels
                        font:
                            style: italic
                            size: 12px
                water-line-labels:
                    draw:
                        text-blend-order:
                            font:
                                size: [[14, 10px], [17, 14px]]
                not-river-not-stream:
                    filter: { kind: [canal,dam,ditch,drain], $zoom: { max: 16 } }
                    draw:
                        text-blend-order:
                            visible: false
                stream:
                    filter: { kind: [stream], $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false


    transit-basemap:
        data: { source: mapzen, layer: transit }
        subway-light-rail:
            filter: { not: { kind: [platform] }, $zoom: { min: 14 } }
            draw:
                lines:
                    order: function() { return feature.sort_rank || 275; }
            railway:
                filter: { kind: [railway,train] }
                draw:
                    lines:
                        color: grey
                        width: [[14, 1px], [16, 2px], [18, 3m]]
            subway:
                filter: { kind: subway }
                draw:
                    lines:
                        color: global.rail1
                        width: [[14, 0.5px], [16, 1px], [17, 1.5px], [18, 2m]]
            light_rail:
                filter: { kind: [light_rail,tram], $zoom: { min: 15 } }
                draw:
                    lines:
                        order: 415    # We want this to be above roads, below gondolas
                        color: grey
                        width: [[14, 0.5px], [16, 1px], [17, 1.5px], [19, 1m]]
        platforms:
            filter: { kind: platform, $zoom: { min: 16 } }
            draw:
                lines_transparent:
                    color: global.platform
                    width: 5m
                    visible: global.platform_v

            polygon_geom:
                filter: { $geometry: polygon }
                draw:
                    polygons_transparent:
                        color: global.platform
                        visible: global.platform_v
                    lines_transparent:
                        visible: false
                    outline_transparent:
                        color: global.platform_o
                        width: [[15, 0px], [16, 0.5px], [19, 2px]]

#    transit-platforms:
#        filter: { kind: platform, $zoom: { min: 15 }, $geometry: [polygon,line] }
#        draw:
#            lines:
#                visible: global.sdk_transit_overlay
#                color: '#bc8f96'
#                width: 10m          # something fishy here with the #include syntax in v0.7 tangram?
#                order: 1000         # this selection should sort above basemap, but grey Zinc color still applies
#                outline:
#                    order: 1002
#            polygons:
#                visible: global.sdk_transit_overlay
#                order: 1001
#        polygon_geom:
#            filter: { $geometry: polygon }
#            draw:
#                polygons:
#                    color: '#bc8f96'
#                    outline:
#                        color: '#bc8f96'
#                        width: [[15,0px],[16,0.5px],[17,1px],[19,2px]]
#                lines:
#                    visible: false

        transit-overlay-rail-lines:
            filter:
                all:
                    - not: { kind: [platform, railway] }
                    - function() { return global.sdk_transit_overlay; }
            draw:
                lines:
                    order: 499
                    color: purple
                    width: [[5,1.5px],[6,2px],[11,3px],[18,4px]]
                    outline:
                        color: [1.,1.,1.,.8]
                        width: [[7,0px],[8,0.25px],[9,0.5px],[12,1.0px],[13,1.75px],[14,2px]]
                        #width: [[12,1.0px],[13,1.75px],[14,2px]]
            train-sizing-color:
                filter: { kind: train }
                draw:
                    lines:
                        color: purple
                        width: [[5,1.0px],[6,1.0px],[7,1.25px],[11,2.0px],[13,2.5px],[18,3.5px]]
                        outline:
                            width: [[12,1.0px],[13,1.75px],[14,2px]]
                stack-below-other-transit-later-zooms:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        lines:
                            order: 511
            subway-sizing:
                filter: { kind: subway }
                draw:
                    lines:
                        width: [[9,1px],[11,2px],[12,3px],[13,4px],[15,5px],[16,7px],[17,9px]]
                        outline:
                            #color: [[10,white],[11,black]]
                            width: [[9,0px],[10,0.5px],[12,1.25px],[13,1.5px],[15,2px]]
                            #width: [[12,1.5px],[13,2.0px],[14,2.5px]]
            light-rail-and-tram-sizing:
                filter: { kind: [light_rail, tram] }
                draw:
                    lines:
                        width: [[10,1px],[12,1.5px],[15,2px],[18,3.5px]]
                        outline:
                            #color: [[11,white],[12,black]]
                            width: [[12,0.25px],[13,0.5px],[14,1px],[16,2px]]
            has-data-color:
                filter: { colour: true }
                draw:
                    lines:
                        order: 510
                        width: [[9,2px],[11,3px],[12,4px]]
                        color: function() { return feature.colour || 'purple'; }
                        #outline:
                            #color: function() { if(feature.colour == 'silver') { return 'black'; } else { return [0.,0.,0.,.1]; } }
                            #width: [[12,1.0px],[13,1.75px],[14,2px]]
                train-with-color:
                    filter: { kind: train }
                    draw:
                        lines:
                            order: 514
                subway-with-color:
                    filter: { kind: subway }
                    draw:
                        lines:
                            order: 513
                light-rail-and-tram-with-color:
                    filter: { kind: [light_rail, tram] }
                    draw:
                        lines:
                            order: 512
            missing-colour:
                filter: { colour: false }
                train-missing-color:
                    filter: { kind: train, colour: false }
                    draw:
                        lines:
                            #width: [[5,1.25px],[6,1.75px],[11,2.0px],[13,2.5px],[18,2.5m]]
                            order: 506
                subway-missing-color:
                    filter: { kind: subway, colour: false }
                    draw:
                        lines:
                            order: 505
                            #outline:
    #                            width: [[12,1.5px],[13,2.0px],[14,2.5px]]
                light-rail-and-tram-missing-color:
                    filter: { kind: [light_rail, tram], colour: false }
                    draw:
                        lines:
                            order: 504
            labels-transit-lines:
                filter:
                    all:
                        - function() { return global.sdk_transit_overlay; }
                        - all:
                            - $zoom: { min: 13 }
                            - ref: true
                draw:
                    mapzen_icon_library:
                        priority: 20
                        # you need to match any custom shield to the vector tile `network` values
                        sprite: function() { return ('sdk_shield-' + feature.ref.length + 'char'); }
                        sprite_default: sdk_shield_5char
                        color: function() { if ( feature.kind === 'train') { return 'purple' } else { return feature.colour || 'purple'; } }
                        # Size is specified below, and limited to 5 char in another filter
                        repeat_group: shields
                        repeat_distance: [[8,90px],[10,40px],[13,30px]]
                        placement: midpoint
                        placement_min_length_ratio:
                            - [8, 0.1]
                            - [9, 0.25]
                            - [10, 0.25]
                            - [11, 0.15]
                            - [12, 1]
                            - [13, 1.50]
                            - [14, 2.0]
                        cull_from_tile: true
    #                    visible: false
                        text:
                            offset: [0px, -0.5px]
                            repeat_distance: 200px
                            anchor: center
                            text_source: function() { if( feature.ref.length < 6 ) { return feature.ref; } else { return ''; } }
                            font:
                                family: Montserrat
                                fill: function() { if(feature.colour == 'yellow') { return '#555'; } else { return 'white'; } }
                                weight: 700
                                size: [[7,7px],[12,8px],[16,11px]]
                                stroke: { width: 0px }

                width_1char:
                    filter: function() { return (feature.ref.length === 1); }
                    draw:
                        mapzen_icon_library:
                            size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
                width_2char:
                    filter: function() { return (feature.ref.length === 2); }
                    draw:
                        mapzen_icon_library:
                            size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
                width_3char:
                    filter: function() { return (feature.ref.length === 3); }
                    draw:
                        mapzen_icon_library:
                            size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
                width_4char:
                    filter: function() { return (feature.ref.length === 4); }
                    draw:
                        mapzen_icon_library:
                            size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
                    # London sucks
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            mapzen_icon_library:
                                visible: false
                width_5char:
                    filter: function() { return (feature.ref.length === 5); }
                    draw:
                        mapzen_icon_library:
                            size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
                    # London sucks
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            mapzen_icon_library:
                                visible: false
                # this is kinda a hack
                width_longggggg:
                    filter: function() { return (feature.ref.length > 5); }
                    draw:
                        mapzen_icon_library:
                            visible: false

            z19-show-long-route-name:
                    filter:
                        all:
                            - function() { return global.sdk_transit_overlay; }
                            - $zoom: { min: 19 }
                    draw:
                        text:
                            font:
                                fill: global.text_fill
                                style: italic
                                stroke: { color: white, width: 3px }

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                #color: black
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                text_source: global.ux_language_text_source
                font:
                    family: global.text_font_family
                    fill: global.text_fill
                    weight: 400

        arrows:
            # oneway arrows and shields are distinct groups!
            filter: { oneway: yes, shield_text: false, not: { kind: rail }, $zoom: { min: 17 } }
            draw:
                arrows:
                    style: mapzen_icon_library
                    flat: true
                    visible: global.icon_visible_arrows
                    sprite: arrow
                    color: global.arrows
                    size: [[17, 7px], [20, 14px]]
                    placement: spaced
                    placement_spacing: [[17, 70px], [20, 175px]]
                    angle: auto
                    text:
                        visible: false

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    # cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [[7, global.highway1_e], [8, global.major_road3]]
                    width: [[9, 2px], [14, 3px], [16, 4px], [17, 10m]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: global.highway1_e
                        width: [[5, 0.45px], [6, 0.75px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [[12, global.minor_road1], [17, global.minor_road2]]
                        width: [[12, 1.0px], [14, 1.5px], [15, 3px], [16, 5m]]
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        color: global.ferry1
                        width: 1px

        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[7, global.highway1_e], [8, global.highway1]]
                    width: [[5, 1px], [8, 2px], [14, 4.0px], [16, 6.5px], [17, 20m]]
                    outline:
                        color: global.highway_casing1
                        width: [[9, 0.5px], [12, 1px], [16, 2px], [18, 6px]]

            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: global.highway_link1
                        width: [[9, 1px], [14, 2.5px], [16, 4px], [18, 9m]]
                        cap: butt
                        outline:
                            color: global.highway_casing1
                            width: [[13, 0px], [14, 1px], [18, 1.5px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: global.highway_tunnel1
                            outline:
                                color: global.highway_tunnel_casing1

            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: global.highway_tunnel1
                        outline:
                            color: global.highway_tunnel_casing1

            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt

            labels-highway:
                filter:
                    $zoom: { min: 13 }
                draw:
                    text-blend-order:
                        priority: 50
                        text_source: global.ux_language_text_source_road_ref_and_name
                        visible: global.text_visible_highway
                        font:
                            fill: [[14, global.text_fill], [16, global.text_fill], [18, global.text_fill2]]
                            size: [[13, 13px], [16, 16px], [20, 20px]]
                            stroke: { color: global.text_stroke_road1, width: 4px }

        major_road:
            filter: { kind: major_road }
            # default style
            draw:
                lines:
                    #cap: round
                    #join: round
                    color: [[8, global.major_road4], [13, major_road2], [17, global.major_road1]]
                    width: [[13, 0px], [14, 2px], [16, 2.5px], [19, 8m]]
                    outline:
                        color: [[0, global.earth1_r], [13, global.major_casing1]]
                        width: [[12, 0px], [13, .5px], [15, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[8, global.major_road5], [9, global.major_road2], [14, global.major_road2], [15, global.major_road1b], [17, global.major_road1]]
                        width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 14m]]
                        outline:
                            width: [[8, 0px], [9, 0.5px], [10, 1px], [12, 1.25px], [14, 1.5px], [16, 2.5px], [18, 4.5px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 379
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [[8, global.major_route2], [9, global.major_route2], [10, global.major_route1]]
                            width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
                            outline:
                                color: global.highway_casing1
                                width: [[9, 0px], [10, 0.5px], [11, 0.75px], [12, 1px], [16, 2px], [18, 4.5px]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    national-routes:
                        filter: { network: ["US:US", "US:I"] }
                        draw:
                            lines:
                                color: [[8, global.major_route2], [9, global.major_route2], [10, global.major_route1]]
                                width: [[8, 2.0px], [10, 2.5px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: global.major_tunnel1
                                outline:
                                    color: global.major_tunnel_casing1
                    labels-trunk_primary-route:
                        filter: { $zoom: { min: 11 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: global.text_visible_trunk_primary
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    fill: global.text_fill
                                    size: [[11, 12px], [16, 16px], [20, 20px]]
                                    stroke: { color: global.text_stroke_road3, width: 4px }
                labels-trunk_primary-z11-z15:
                    filter: { $zoom: { min: 11, max: 16 } }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [[11, global.text_fill], [15, global.text_fill], [16, global.text_fill2]]
                                size: [[11, 11px], [16, 13px]]
                                stroke: { color: global.text_stroke_road2, width: 4px }
                labels-trunk_primary-z16-up:
                    filter: { $zoom: { min: 16 } }
                    draw:
                        text-blend-order:
                            priority: 51
                            visible: global.text_visible_trunk_primary
                            text_source: global.ux_language_text_source_road_ref_and_name
                            font:
                                fill: global.text_fill2
                                size: [[16, 13px], [20, 20px]]
                                stroke: { color: global.text_stroke_road2, width: 4px }


            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[8, global.major_road2], [14, global.major_road2], [15, global.major_road1b], [17, global.major_road1]]
                        width: [[10, 1px], [14, 3px], [16, 4.5px], [18, 10m]]
                        outline:
                            color: global.major_casing1
                            width: [[10, 1px], [14, 1px], [18, 1.5px]]
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: global.major_tunnel1
                        outline:
                            color: global.major_tunnel_casing1
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [[13, global.major_road3], [14, global.major_road3], [15, global.major_road1b], [17, global.major_road1]]
                        width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 7.0px], [19, 16m]]
                        outline:
                            width: [[11, 0px], [12, .75px], [13, 1.0px], [14, 1.75px], [15, 2.0px], [16, 3.0px], [18, 4.0px]]
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[8, global.major_road5], [9, global.major_route2], [10, global.major_route1]]
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: global.major_tunnel1
                                outline:
                                    color: global.major_tunnel_casing1
                    labels-secondary-routes:
                        filter: { $zoom: { min: 12 } }
                        draw:
                            text-blend-order:
                                priority: 56
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                visible: global.text_visible_secondary
                                font:
                                    fill: [[12, global.text_fill], [15, global.text_fill], [16, global.text_fill2]]
                                    size: [[12, 12px], [15, 13px]]
                                    stroke: { color: global.text_stroke_road3, width: 2px }
                        labels-secondary-routes-z15:
                            filter: { $zoom: { min: 15 } }
                            draw:
                                text-blend-order:
                                    font:
                                        weight: 600
                in_park:
                    filter: { landuse_kind: [park, nature_reserve, conservation, golf_course, garden, zoo] }
                    draw:
                        lines:
                            color: [[11, global.green1_r], [12, global.minor_road3]]
                            outline:
                                color: [[14, global.green1_r], [15, global.major_casing1]]
                                width: [[12, 0px], [13, 0.5px], [15, 1.0px], [16, 1.5px], [18, 3.0px]]
                labels-secondary:
                    filter: { $zoom: { min: 12 } }
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: global.text_visible_secondary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [[11, global.text_fill], [15, global.text_fill], [16, global.text_fill2]]
                                size: [[12, 10px], [16, 12px], [20, 20px]]
                                stroke: { color: global.text_stroke_road2, width: [[12, 2px], [18, 4px]] }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [[13, global.major_road2], [14, global.major_road2], [15, global.major_road1b], [17, global.major_road1]]
                        width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]
                        outline:
                            width: [[11, 0px], [13, 0.5px], [14, 1.0px], [15, 1.5px], [16, 2.0px], [18, 3.5px]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: global.minor_route
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: global.major_tunnel1
                                outline:
                                    color: global.major_tunnel_casing1
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: global.major_road1
                            width: [[11, 0.0px], [12, 0.5px], [14, 1.5px], [16, 2.0px], [19, 7m]]
                            outline:
                                color: [[12, global.major_casing2],[13, global.major_casing1]]
                                width: [[12, 0px], [14, .25px], [16, 1.0px], [18, 4.0px]]
                in_park:
                    filter: { landuse_kind: [park, nature_reserve, conservation, golf_course, garden, zoo] }
                    draw:
                        lines:
                            color: [[11, global.green1_r], [12, global.minor_road3]]
                            outline:
                                color: [[14, global.green1_r], [15, global.major_casing1]]
                                width: [[12, 0px], [13, 0.5px], [14, 1.0px], [16, 1.5px], [18, 3.0px]]
                labels-tertiary:
                    filter: { $zoom: { min: 13 } }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: global.text_visible_tertiary
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                fill: [[12, global.text_fill_road_e], [18, global.text_fill2]]
                                size: [[13, 10px], [16, 12px], [20, 18px]]
                                stroke: { color: global.text_stroke_road2, width: [[13, 2px], [16, 4px]] }
        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service } }
            draw:
                lines:
                    color: global.minor_road3
                    width: [[11, 0.5px], [12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
                    outline:
                        width: [[14, 0px], [15, 0.5px], [17, 0.75px], [19, 2px]]
                        color: [[16, global.minor_casing1], [17, global.minor_casing2]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351
            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            in_park:
                filter: { landuse_kind: [park, protected_area, nature_reserve, conservation, golf_course, garden, wood, farmland, farm, zoo] }
                draw:
                    lines:
                        color: global.minor_road3
                        outline:
                            color: [[14, global.green1_r], [17, global.minor_casing2]]
                            width: [[12, 0px], [13, 0.5px], [14, 1.0px], [16, 1.5px], [18, 3.0px]]
            in_university:
                filter: { landuse_kind: university }
                draw:
                    lines:
                        outline:
                            color: global.university_r
                            width: [[13, 0px], [14, 0.5px], [18, 4.0px]]
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    lines:
                        outline:
                            color: global.hospital_r
                            width: [[13, 0px], [14, 0.5px], [18, 4.0px]]

            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        cap: butt
                        color: global.minor_tunnel1
                        outline:
                            color: global.minor_tunnel_casing1
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-minor_road:
                filter: { $zoom: { min: 15 } }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: global.text_visible_minor_road
                        text_source: name
                        font:
                            size: [[15, 9px], [18, 15px]]
                            fill: [[15, global.text_fill_road_e], [18, global.text_fill2]]
                            stroke: { color: global.text_stroke_road4, width: [[15, 2px], [18, 4px]] }
        service_road:
            filter: { kind: minor_road, kind_detail: service }
            draw:
                lines:
                    color: global.service_road
                    width: [[13, 0.5px], [17, 3px], [18, 4m]]
                    outline:
                        color: global.service_road_casing
                        width: [[15, 0px], [16, 0px], [19, 2px]]
            in_landuse:
                filter:
                    landuse_kind: [park, forest, nature_reserve, conservation, golf_course, garden, zoo, cemetery, garden university, hospital]
                draw:
                    lines:
                        outline:
                            width: [[13, 0px], [14, 0px], [18, 3px]]
                in_park:
                    filter: { landuse_kind: [park, forest, nature_reserve, conservation, golf_course, garden, zoo] }
                    draw:
                        lines:
                            outline:
                                color: global.green1_r
                in_cemetery_garden:
                    filter: { landuse_kind: [cemetery,garden] }
                    draw:
                        lines:
                            outline:
                                color: global.green2_r
                in_university:
                    filter: { landuse_kind: university }
                    draw:
                        lines:
                            outline:
                                color: global.university_r
                in_hospital:
                    filter: { landuse_kind: hospital }
                    draw:
                        lines:
                            outline:
                                color: global.hospital_r
            labels-service_road:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: global.text_visible_service_road
                        text_source: name
                        font:
                            size: [[17, 11px], [18, 14px]]
                            fill: [[17, global.text_fill], [18, global.text_fill2]]
                            stroke: { color: global.text_stroke_road4, width: [[17, 3px], [18, 4px]] }

        path:
            filter:
                all:
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    color: global.path1
                    width: [[14, 0.5px], [15, 1.5px], [17, 3m]]
                    outline:
                        color: global.path_casing1
                        width: [[15, 0px], [17, 0px], [18, 1px]]
            early:
                filter:
                    $zoom: { max: 15 }
                draw:
                    lines:
                        order: 351
                        outline:
                            order: 350

            z16-up:
                filter:
                    $zoom: { min: 16 }
                draw:
                    lines:
                        cap: round

            pedestrian:
                filter: { kind_detail: pedestrian }
                draw:
                    lines:
                        color: global.path1
                        width: [[14, 0.5px], [15, 1.5px], [17, 3m]]

            footway:
                filter: { kind_detail: footway }
                draw:
                    lines:
                        color: global.path1
                        width: [[14, 0.5px], [15, 1.5px], [17, 3m]]

            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        width: [[15, 3.5px], [17, 3m]]
                        cap: round
                        outline:
                            color: [[15, global.path_bridge_casing2], [16, global.path_bridge_casing1]]
                            width: [[14, 0px], [16, 1.0px], [18, 2px]]
                            cap: butt
            in_park:
                # should `forest` and `wood` be included?
                filter: { landuse_kind: [park, nature_reserve, conservation, golf_course, garden] }
                draw:
                    lines:
                        color: [[14, global.green1_r], [16, global.minor_road3]]
                        outline:
                            color: global.green1_r
                            width: [[14, 0px], [15, 0.5px], [18, 2px]]
            in_other:
                filter: { landuse_kind: [cemetery, garden, zoo, university, hospital] }
                draw:
                    lines:
                        outline:
                            width: [[14, 0px], [16, 0.5px], [18, 3px]]
                in_cemetery_garden:
                    filter: { landuse_kind: [cemetery,garden] }
                    draw:
                        lines:
                            outline:
                                color: global.green2_r
                in_zoo:
                    filter: { landuse_kind: zoo }
                    draw:
                        lines:
                            outline:
                                color: global.green1_r
            in_university:
                filter: { landuse_kind: university }
                draw:
                    lines:
                        color: [[14, global.university_r], [16, global.minor_road3]]
                        outline:
                            color: global.university_r
                            width: [[14, 0px], [16, 0.5px], [18, 2px]]
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    lines:
                        color: [[14, global.hospital_r],[16, global.minor_road3]]
                        outline:
                            color: global.hospital_r
                            width: [[14, 0px], [16, 0.5px], [18, 2px]]
            labels-path:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: global.text_visible_path
                        text_source: name
                        font:
                            fill: global.text_fill
                            size: 12px
                            stroke: { color: global.text_stroke_road4, width: 4px }
        track:
            filter: { kind: path, kind_detail: track }
            draw:
                lines:
                    color: global.minor_road3
                    width: [[13, 0.5px], [14, 1.0px], [15, 1.0px], [16, 6m]]
                    cap: butt
                    join: round
                    outline:
                        color: global.minor_casing1
                        width: [[14, 0px], [15, 0px], [16, 0.5px], [17, 1.0px], [18, 2.0px]]
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        width: [[15, 3.5], [17, 3m]]
                        cap: round
                        outline:
                            color: [[15, global.minor_casing2],[16, global.minor_casing1]]
                            width: [[15, 0.5px], [16, 1.0px], [18, 2px]]
                            cap: butt
            in_park:
                filter: { landuse_kind: [park, national_park, nature_reserve,c onservation, golf_course, garden] }
                draw:
                    lines:
                        width: [[13, 0.5px], [14, 0.5px], [15, 1.0px], [16, 6m]]
                        outline:
                            color: [[16, global.green1_r], [17, global.major_casing1]]
                            width: [[15, 0px], [17, 0.5px], [18, 1.0px], [19, 2.0px]]

            labels-track:
                filter: { $zoom: { min: 16 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: global.text_visible_path
                        text_source: name
                        font:
                            fill: global.text_fill
                            size: [[16,11px],[17,12px]]
                            stroke: { color: global.text_stroke_road4, width: 4px }

        steps:
            filter:
                all:
                    - kind: path
                    - kind_detail: steps
            draw:
                dashed_steps:
                    order: global.feature_order
                    color: global.path_steps2
                    width: [[15, 0.5px], [18, 3px], [19, 1.5m]]
                    outline:
                        style: lines
                        color: [[14, global.earth1], [18, global.path_steps1]]
                        width: [[14, 0px], [15, 1px], [18, 1.5m]]
            in_park:
                filter: { landuse_kind: [park, nature_reserve, conservation, golf_course, garden] }
                draw:
                    dashed_steps:
                        color: [[14, global.green1_r], [16, global.minor_road3]]
                        outline:
                            color: global.green1_r
            in_university:
                filter: { landuse_kind: university }
                draw:
                    dashed_steps:
                        color: [[14, global.university_r], [16, global.minor_road3]]
                        outline:
                            color: global.university_r
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    dashed_steps:
                        color: [[14, global.hospital_r],[16, global.minor_road3]]
                        outline:
                            color: global.hospital_r
            labels-steps:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 62
                        visible: global.text_visible_steps
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 11px
                            stroke: { color: global.text_stroke_road4, width: 4px }

        shields:
            filter:
                $zoom: { min: 6 }
                #
                # United State looks great with shield_text alone, but...
                #
                #shield_text: true    # some roads don't have shield text, deal with that later
                #
                # Europe doesn't have many network relations set, so we could look for either
                # shield_text or ref (with no shield_text) but...
                # that makes United States look a bit funky with `(xxx)` and generic shields
                # showing up in fields of custom state shields like US:CA and US:NY
                #
                any:
                    - shield_text: true    # some roads don't have shield text, deal with that later
                    - all:
                        - shield_text: false    # some roads don't have shield text, deal with that later
                        - ref: true
                        - kind_detail: [motorway, trunk, primary, secondary, tertiary]
            # default
            draw:
                mapzen_icon_library:
                    # you need to match any custom shield to the vector tile `network` values
                    sprite: |
                        function() {
                            if( feature.shield_text ) {
                                return ('generic_shield-' + feature.shield_text.length + 'char');
                            } else {
                                return ('generic_shield-' + feature.ref.length + 'char');
                            }
                        }
                    sprite_default: generic_shield-5char
                    priority: 58
                    # Size is specified below, and limited to 5 char in another filter
                    repeat_group: shields
                    repeat_distance: [[8,90px],[10,40px],[13,30px]]
                    placement: midpoint
                    placement_min_length_ratio:
                        - [8, 0.1]
                        - [9, 0.25]
                        - [10, 0.25]
                        - [11, 0.15]
                        - [12, 1]
                        - [13, 1.50]
                        - [14, 2.0]
                    cull_from_tile: true
                    visible: false
                    text:
                        offset: [0px, -0.5px]
                        repeat_distance: 200px
                        anchor: center
                        text_source: |
                            function() {
                                if( feature.shield_text ) {
                                    return feature.shield_text;
                                } else {
                                    return feature.ref;
                                }
                            }
                        font:
                            family: Montserrat
                            weight: 500
                            fill: global.text_fill_shield
                            size: [[7, 7px], [12, 8px], [16, 11px]]
                            stroke: { width: 0px }

            default_priority_highway:
                filter:
                    all:
                        - kind_detail: motorway
                        - $zoom: { min: 9 }
                draw:
                    mapzen_icon_library:
                        priority: 47
                        #color: yellow
                        visible: global.sdk_road_shields

            default_priority_trunk:
                filter:
                    all:
                        - kind_detail: [trunk]
                        - $zoom: { min: 10 }
                draw:
                    mapzen_icon_library:
                        priority: 48
                        #color: red
                        visible: global.sdk_road_shields
            default_priority_primary:
                filter:
                    all:
                        - kind_detail: [primary]
                        - $zoom: { min: 12 }
                draw:
                    mapzen_icon_library:
                        priority: 49
                        #color: aqua
                        visible: global.sdk_road_shields
            default_priority_trunk_secondary:
                filter:
                    all:
                        - kind_detail: [secondary]
                        - $zoom: { min: 12 }
                draw:
                    mapzen_icon_library:
                        priority: 53
                        #color: blue
                        visible: global.sdk_road_shields
            default_priority_trunk_tertiary:
                filter:
                    all:
                        - kind_detail: tertiary
                        - $zoom: { min: 13 }
                draw:
                    mapzen_icon_library:
                        priority: 55
                        #color: green
                        visible: global.sdk_road_shields

            width_1char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 1)
                        } else {
                            return (feature.ref.length === 1)
                        }
                    }
                draw:
                    mapzen_icon_library:
                        size: [[6,[14px,14px]],[13,[16px,16px]],[16,[18px,18px]]]
            width_2char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 2)
                        } else {
                            return (feature.ref.length === 2)
                        }
                    }
                draw:
                    mapzen_icon_library:
                        size: [[6,[18px,14px]],[13,[20px,15px]],[16,[24px,18px]]]
            width_3char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 3)
                        } else {
                            return (feature.ref.length === 3)
                        }
                    }
                draw:
                    mapzen_icon_library:
                        size: [[6,[25px,14px]],[13,[27px,15px]],[16,[33px,18px]]]
            width_4char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 4)
                        } else {
                            return (feature.ref.length === 4)
                        }
                    }
                draw:
                    mapzen_icon_library:
                        size: [[6,[29px,14px]],[13,[31px,15px]],[16,[38px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        mapzen_icon_library:
                            visible: false
            width_5char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 5)
                        } else {
                            return (feature.ref.length === 5)
                        }
                    }
                draw:
                    mapzen_icon_library:
                        size: [[6,[34px,14px]],[13,[37px,15px]],[16,[45px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        mapzen_icon_library:
                            visible: false
            # this is kinda a hack
            width_longggggg:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length > 5)
                        } else {
                            return (feature.ref.length > 5)
                        }
                    }
                draw:
                    mapzen_icon_library:
                        visible: false
            #
            # Now for the good stuff
            #
            legit-shields:
                filter: { shield_text: true }
                # draw:
                #     mapzen_icon_library:
                #         color: pink

                # US Interstate roads
                US-I:
                    filter:
                        network: 'US:I'
                    draw:
                        mapzen_icon_library:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            priority: 46
                            visible: global.sdk_road_shields
                            text:
                                offset: [0px, 0.5px]
                                font:
                                    fill: global.text_fill_shield
                                    size: [[7, 8px], [13, 9px], [15, 11px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[15px,18px]],[13,[17px,20px]],[15,[22px,25px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[25px,25px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[23px,18px]],[13,[26px,20px]],[15,[33px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[35px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[26px,18px]],[13,[30px,20px]],[15,[38px,25px]]]
                # US Federal Routes
                US-US:
                    filter:
                        network: ['US:US','US:US:Business', 'US:US:Truck', 'US:US:Alternate']
                        $zoom: { min: 7 }
                    draw:
                        mapzen_icon_library:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: |
                                function() { return ('US:US-' + feature.shield_text.length + 'char'); }
                            priority: 47
                            cull_from_tile: true
                            visible: global.sdk_road_shields
                            text:
                                offset: [0px, -0.7px]
                                font:
                                    fill: global.text_fill_shield
                                    size: [[7, 8px], [13, 9px], [15, 11px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[15px,17px]],[13,[17px,19px]],[15,[22px,24px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[18px,17px]],[13,[20px,19px]],[15,[26px,24px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[34px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[25px,17px]],[13,[29px,19px]],[15,[39px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[27px,17px]],[13,[30px,19px]],[15,[41px,25px]]]
                # US State Routes
                # US-states:
                #     # Match state highways: `US:??`
                #     filter: |
                #         function() {
                #             return feature.shield_text &&
                #                 /^US:(?!US)\w\w$/.test(feature.network)
                #         }
                #     draw:
                #         mapzen_icon_library:
                #             # you need to match any custom shield to the vector tile `network` values
                #             #priority: 48
                #             visible: global.sdk_road_shields
                US-CA:
                    # Match California state highways: `US:CA`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:CA$/.test(feature.network)
                        }
                    draw:
                        mapzen_icon_library:
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            #priority: 48
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: global.text_fill_shield
                                    size: [[7, 7px], [13, 9px], [15, 10px]]
                    motorway:
                        filter: { kind_detail: [motorway], $zoom: [7,8] }
                        draw:
                            mapzen_icon_library:
                                visible: global.sdk_road_shields
                    trunk:
                        filter: { kind_detail: [trunk], $zoom: [8,9] }
                        draw:
                            mapzen_icon_library:
                                visible: global.sdk_road_shields
                    primary:
                        filter: { kind_detail: primary, $zoom: [10,11] }
                        draw:
                            mapzen_icon_library:
                                visible: global.sdk_road_shields
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[14px,16px]],[13,[15px,18px]],[15,[18px,21px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[23px,23px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[21px,18px]],[13,[24px,20px]],[15,[28px,23px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[24px,18px]],[13,[26px,20px]],[15,[31px,23px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[32px,23px]]]
                US-NY:
                    # Match New York state highways: `US:NY`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:NY$/.test(feature.network)
                                /* (/^US:NY$/.test(feature.network) || /^NY:US$/.test(feature.network)) */
                        }
                    draw:
                        mapzen_icon_library:
                            sprite: |
                                function() { return ( 'US:NY-' + feature.shield_text.length + 'char'); }
                            text:
                                # offset: [0px, 1px]
                                font:
                                    fill: global.text_fill_shield
                                    size: [[7, 7px], [13, 9px], [15, 10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[20px,17px]],[13,[22px,19px]],[15,[27px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[29px,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30px,22px]]]
                US-PA:
                    # Match Pennsylvania state highways
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:PA$/.test(feature.network)
                        }
                    draw:
                        mapzen_icon_library:
                            sprite: |
                                function() { return ( 'US:PA-' + feature.shield_text.length + 'char'); }
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: global.text_fill_shield
                                    size: [[7, 7px], [13, 9px], [15, 10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[28px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30x,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[24px,17px]],[13,[27px,19px]],[15,[32px,22px]]]
                # USA County Routes
                US-counties:
                    # Match state highways: `US:??:*`
                    #
                    # this is very USA specific
                    #
                    # filter: |
                    #     function() {
                    #         return feature.shield_text &&
                    #             /^US:(?!US)\w\w:.*$/.test(feature.network)
                    #     }
                    #
                    # this generic for any country with 3rd level networks (like county routes in USA)
                    # BEWARE:
                    # US:US:Business  about 150
                    # US:US:Truck
                    # US:US:Alternate
    #
                    # STATE ROUTE
                    # ??:??:Loop  about 200
                    # ??:??:Spur  about 200
                    # ??:??:Business   about 100
    #
                    # STATE TEXAS SPECIAL ROUTE
                    # US:TX:FM -- probably just state? there are 3k of these
                    #
                    #
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^\w+:\w+:(!Alternate).+$/.test(feature.network) &&
                                $zoom > 10
                        }
                    draw:
                        mapzen_icon_library:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return ('county_shield_' + feature.shield_text.length + 'char'); }
                            #color: pink
                            #priority: 19
                            visible: global.sdk_road_shields
                            text:
                                font:
                                    fill: global.text_fill_shield2
                                    #size: [[11,7px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[14px,14px]],[13,[16px,16px]],[15,[18px,18px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[16px,14px]],[13,[18px,15px]],[15,[22px,18px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[20px,14px]],[13,[21px,15px]],[15,[26px,18px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[25px,14px]],[13,[28px,15px]],[15,[34px,18px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            mapzen_icon_library:
                                size: [[6,[30px,14px]],[13,[33px,15px]],[15,[40px,18px]]]

        winter_sport_pistes:
            filter: { kind: piste }
            draw:
                lines:
                    order: 388   # We override the server value here because this is also a special Ski Map
                    cap: round
                    join: round
                    color: '#909090'
                    width: [[13,0px],[14,0.5px],[15, 1px], [16, 2px], [18, 3m]]
                text-blend-order:
                    priority: 18
                    visible: global.text_visible_piste
                    font:
                        fill: global.text_fill_piste
                        size: 11px
                        stroke: { color: global.grey8, width: 4px }
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    text-blend-order:
                        visible: false
            easy:
                filter: { piste_difficulty: easy }
                draw:
                    lines:
                        color: global.piste_easy
            intermediate:
                filter: { piste_difficulty: intermediate }
                draw:
                    lines:
                        color: global.piste_intermediate
            advanced:
                filter: { piste_difficulty: advanced }
                draw:
                    lines:
                        color: global.piste_advanced
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_advanced
            expert:
                filter: { piste_difficulty: expert }
                draw:
                    lines:
                        color: global.piste_expert
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_expert
        pier:
            filter: { kind: path, kind_detail: pier }
            draw:
                lines:
                    color: global.path1
                    width: [[13, 1.5px], [15, 2.0px], [17, 3m]]
        racetrack:
            filter: { kind: racetrack }
            draw:
                lines:
                    cap: round
                    join: round
                    color: global.orange3
                    width: [[13, 1.5px], [16, 5px], [19, 15m]]
        airport-lines:
            filter: { kind: aeroway, kind_detail: [runway,taxiway] }
            draw:
                lines:
                    color: global.taxiway
                    cap: butt
                    width: [[10, 1px], [13, 4px], [15, 16px], [17, 60m]]
            # Features come in at zoom 9, but include mostly minor airports without POIs until z13
            early:
                filter: { $zoom: { max: 12 }, not: { landuse_kind: [aerodrome, runway, taxiway] } }
                draw:
                    lines:
                        visible: false
            not-round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: butt
            taxiway:
                filter: { kind_detail: taxiway }
                draw:
                    lines:
                        color: global.taxiway
                        width: [[14, 1px], [15, 1.5px], [16, 8m]]
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            visible: false
            runway:
                filter: { kind_detail: runway }
                draw:
                    lines:
                        color: global.runway
        ferry:
            filter: { kind: ferry }
            draw:
                lines:
                    color: global.ferry1
                    width: [[12, 0.5px], [14, 1px], [17, 3m]]
        aerialway:
            filter: { kind: aerialway }
            draw:
                lines:
                    color: global.grey2
                    width: [[14, 0.5px], [15, 1.0px], [16, 2m]]
            gondola_cable_car:
                filter: { kind_detail: [gondola, cable_car] }
                draw:
                    lines:
                        color: global.grey2
                        width: [[12, 2.0px], [13, 2px], [14, 3.5px], [15, 4.5px], [16, 9m]]
            chair_lift:
                filter: { kind_detail: chair_lift }
                draw:
                    lines:
                        color: global.chairlift
                        width: [[13, 1px], [14, 1.5px], [15, 3px], [16, 7m]]
            aerialway-labels:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 63
                        visible: global.text_visible_aerialway
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 12px
                            stroke: { color: global.grey8, width: 4px }
                minor:
                    filter: { not: { kind_detail: [gondola,cable_car,chair_lift] }, $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false
                early_gondola:
                    filter: { $zoom: [14], kind_detail: [gondola,cable_car] }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
                later:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
        railway:
            filter: { kind: rail, not: { kind_detail: [subway,light_rail,tram] } }
            draw:
                railway_dash:
                    color: [[14, global.rail1_e], [16, global.rail1]]
                    width: [[12, 0px], [14, 0px], [18, 2px], [20, 2m]]
                    # let roads sort themselves past zoom 14
                    order: global.feature_order
                    # but give them all the same outline
                    outline:
                        order: 354
            bridges-tunnels:
                filter: { any: [is_bridge: true, is_tunnel: true] }
                draw:
                    lines:
                        outline:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: function() { return feature.sort_rank || 305; }
            service:
                filter: { service: true }
                draw:
                    lines:
                        color: global.rail2
                        width: [[14, 0px], [15, 0.4px], [18, 1px]]

    # buildings are the only layer that gets lighting
    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }

        draw:
            polygons:
                visible: false
                # order: 329
                order: 355
                color: global.building1
            lines:
                visible: false
                # order: 330
                order: 356
                color: global.building2
                width: [[14, 0px], [15, 1px], [18, 1px], [19, 0.4m]]

        footprints:
            filter:
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], area: { min: 5000 }, name: true }
                    - { $zoom: [15], area: { min: 5000 }, kind: true }
                    - { $zoom: [15], area: { min: 3000 }, landuse_kind: true }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 1000 }, name: true }
                    - { $zoom: [16], area: { min: 1000 }, kind: true }
                    - { $zoom: [16], area: { min: 2000 }, landuse_kind: true }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 } }
            draw:
                polygons:
                    visible: true
                lines:
                    visible: true

            extrude:
                filter:
                    all:
                        - function() { return global.sdk_building_extrude; }
                        - any:
                            - { $zoom: [15], height: { min: 190 } }
                            - { $zoom: [15], area: { min: 5000 } }
                            - { $zoom: [15], volume: { min: 100000 } }
                            - { $zoom: [16], height: { min: 100 } }
                            - { $zoom: [16], area: { min: 3500 } }
                            - { $zoom: [16], volume: { min: 50000 } }
                            - { $zoom: [17], area: { min: 500 } }
                            - { $zoom: [17], volume: { min: 15000 } }
                            - { $zoom: { min: 18 } }
                        - not:
                            - layer: [-1, -2, -3, -4, -5]
                draw:
                    polygons:
                        visible: true
                        order: 438
                        extrude: global.building_extrude_height
                    lines:
                        visible: true
                        order: 439
                        extrude: global.building_extrude_height

            basement:
                filter:
                    all:
                        - layer: [-1, -2, -3, -4, -5]
                draw:
                    polygons:
                        visible: false
                    lines:
                        color: global.building2

        in_park:
            #todo: does forest belong here?
            filter: { landuse_kind: [park,forest,nature_reserve,conservation,golf_course,garden] }
            draw:
                polygons:
                    color: global.green1_b
                lines:
                    color: global.green1_bo
            other_green:
                filter: { landuse_kind: [golf_course, nature_reserve, conservation] }
                draw:
                    lines:
                        color: global.green1_r

        in_zoo:
            filter: { landuse_kind: [zoo, animal, enclosure, petting_zoo, aviary] }
            draw:
                polygons:
                    color: global.green2_b
                lines:
                    color: global.green2_bo
        in_university:
            filter: { landuse_kind: [university,school] }
            draw:
                polygons:
                    color: global.university_b
                lines:
                    color: global.university_bo
        in_hospital:
            filter: { landuse_kind: hospital }
            draw:
                polygons:
                    color: global.hospital_b
                lines:
                    color: global.hospital_bo
        in_airport:
            filter: { landuse_kind: [aerodrome, runway, taxiway] }
            draw:
                polygons:
                    color: global.airport_b
                lines:
                    color: global.airport_bo


        building-labels:
            filter:
                all:
                    - { $zoom: { min: 17 } }
                    - $geometry: point
                    - not: { kind: address }
                    - name: true
                    - function() { return global.text_visible_building; }
                any:
                    - { $zoom: [16], area: { min: 5000 } }
                    - { $zoom: [16], area: { min: 5000 } }
                    - { $zoom: [16], area: { min: 10000 }, landuse_kind: true }
                    - { $zoom: [16], area: { min: 7000 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [16], volume: { min: 50000 }, name: true }
                    - { $zoom: [17], area: { min: 3000 } }
                    - { $zoom: [17], area: { min: 2000 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [18], area: { min: 1000 } }
                    - { $zoom: [18], kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: [19], area: { min: 200 } }
                    - { $zoom: { min: 19 }, kind_detail: [university, college, school, kindergarten] }
                    - { $zoom: { min: 20 }, area: true }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    move_into_tile: true
                    priority: 51
                    order: 7
                    font:
                        fill: global.text_fill
                        family: global.text_font_family
                        style: italic
                        size: [[17, 12px], [20, 14px]]
                        stroke: { color: global.text_stroke_building, width: [[17, 2px], [18, 3px]] }
            building_labels-z18-up:
                filter: { $zoom: { min: 18 } }
                draw: { text-blend-order: { font: { weight: 600 } } }
            building-labels-z16:
                filter: function() { if( $zoom == 16 && feature.name.length > 20 ) { return true; } else { return false; } }
                draw:
                    text-blend-order:
                        visible: false
            building-labels-z17:
                filter: function() { if( $zoom == 17 && feature.name.length > 30 ) { return true; } else { return false; } }
                draw:
                    text-blend-order:
                        visible: false
            building-labels-z20+:
                filter: { $zoom: { min: 20 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_building_and_address
        address-labels:
            filter:
                all:
                    - function() { return global.text_visible_address; }
                    - $zoom: { min: 20 }
                any:
                    - kind: address
                    - { label_position: true, addr_housenumber: true, name: false }
            draw:
                text-blend-order:
                    order: 7
                    text_source: addr_housenumber
                    font:
                        fill: global.text_fill_address
                        family: global.text_font_family
                        style: italic
                        size: 10px
                        stroke: { color: global.text_stroke_address, width: 4px }

    boundaries:
        data: { source: mapzen, layer: boundaries }
        # country subdivisions (states, provinces)
        draw:
            lines:
                order: global.feature_order
        country:
            filter:
                any:
                    - kind: country
                    - admin_level: 2
            draw:
                lines:
                    color: global.country_boundary
                    width: [[1, 0.5px], [2, 1.0px], [4, 1.5px], [9, 2.5px], [14, 3.5px], [16, 4.5px], [17, 14m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            country-labels:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        priority: 2
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_boundary_lines_left_right
                        offset: [0, 5px]
                        text_wrap: 100
                        font:
                            family: global.text_font_family
                            size: 9px
                            fill: global.text_fill
                            transform: uppercase
                            stroke: { color: global.earth1, width: 3px }
                no-left-right:
                    filter: { "name:left": false, "name:right": false }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_boundary_lines
                            offset: 0px

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                dashed:
                    order: global.feature_order
                    color: global.country_boundary
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    dashed:
                        visible: false
                    dashed_big:
                        order: global.feature_order
                        color: global.country_boundary
                        width: [[1,0.5px],[9,2.5px],[17,14m]]
        region:
            filter:
                any:
                    - kind: [region,macroregion]
                    - kind_detail: [3,4]
            draw:
                lines:
                    color: global.region_boundary
                    width: [[2, 0.75px], [3, 1px], [5, 1.5px], [9, 3.5px], [14, 5.5px], [16, 6.5px], [17, 16m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false

            region-labels:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        priority: 3
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_boundary_lines_left_right
                        offset: [0, 5px]
                        text_wrap: 100px
                        font:
                            family: Varela
                            size: 9px
                            weight: 200
                            fill: global.text_fill_region
                            transform: uppercase
                            stroke: { color: global.earth1, width: 4px }
                no-left-right:
                    filter: { "name:left": false, "name:right": false }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_boundary_lines
                            offset: 0px

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            mapzen_icon_library:
                visible: false
                text:
                    text_source: global.ux_language_text_source
                    visible: false
                    buffer: 3px
                    font:
                        family: global.text_font_family
                        fill: global.text_fill
            # NOTE: This is a hack for localities because of an icon & text bug, see note below
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: global.text_fill
            # END NOTE

        country:
            filter:
                kind: country
                $zoom: { min: 3, max: 9 }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    font:
                        fill: global.text_fill
                        weight: 600
                        transform: uppercase
            country-z2-3:
                filter:
                    $zoom: [2,3]
                draw:
                    text-blend-order:
                        priority: 10
                        buffer: 10px
                        font:
                            size: [[2,9px],[3,10px]]
                early-ones-z2:
                    filter:
                        $zoom: [2]
                        not: { name: [United States of America,Brasil,中华人民共和国,Россия,Canada,Kalaallit Nunaat,Ísland,Australia,India,日本,Guam,Indonesia,South Africa,مصر,Nigeria,Kenya] }
                    draw:
                        text-blend-order:
                            visible: false
                early-ones-z3:
                    filter:
                        $zoom: [3]
                        name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España]
                    draw:
                        text-blend-order:
                            visible: false
            country-z4:
                filter:
                    $zoom: [4]
                draw:
                    text-blend-order:
                        buffer: 10px
                        priority: 8
                        font:
                            size: 12px
                early-ones-z4:
                    filter:
                        name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España,Magyarország,Österreich,Polska,Хуссар Ирыстон,Аҧсны - Абхазия]
                    draw:
                        text-blend-order:
                            visible: false
            country-z5:
                filter:
                    $zoom: [5]
                draw:
                    text-blend-order:
                        priority: 8
                        font:
                            size: 13px
                            stroke: { color: global.text_stroke, width: 3px }
                early-ones-z5:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,El Salvador,Belize,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z6:
                filter:
                    $zoom: [6]
                draw:
                    text-blend-order:
                        priority: 8
                        font:
                            weight: 600
                            size: 14px
                            stroke: { color: global.text_stroke, width: 3px }
                small-ones-z6:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z7:
                # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                filter: { $zoom: { min: 7, max: 9 } }
                draw:
                    text-blend-order:
                        font:
                            size: 16px
                            weight: bold
                            stroke: { color: global.text_stroke, width: 4px }
                small-ones-z7:
                    filter:
                        $zoom: [7]
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        name: [Liechtenstein,San Marino,Civitatis Vaticanæ,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                    draw:
                        text-blend-order:
                            visible: false
                small-pop:
                    filter:
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            priority: 30
                            font:
                                size: 12px

        region:
            filter:
                kind: region
                $zoom: { min: 4, max: 9 }
            draw:
                text-blend-order:
                    priority: 14
                    visible: false
                    text_source: global.ux_language_text_source_short
                    font:
                        size: 10px
                        weight: 300
                        fill: global.text_fill
                        transform: uppercase
            region-z4:
                filter:
                    $zoom: [4]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
            region-z5:
                filter:
                    $zoom: [5]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        font:
                            size: 13px
            region-z6:
                filter:
                    $zoom: [6]
                    not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        font:
                            size: 13px
                            stroke: { color: global.text_stroke, width: 4px }
            region-z7-z8:
                filter: { $zoom: [7,8] }
                draw:
                    text-blend-order:
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_short_proxy_name
                        font:
                            size: 14px
                            stroke: { color: global.text_stroke, width: 4px }
                pesky:
                    filter:
                        $zoom: [7]
                        name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen]
                    draw:
                        text-blend-order:
                            visible: false

                abbrev-small-ones-z7:
                    filter:
                        $zoom: [7]
                        name: [Delaware,New Jersey,Connecticut,Rhode Island,Massachusetts,New Hampshire,Vermont]
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_abbreviation
                region-z8:
                    filter:
                        $zoom: [8]
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source
                    no-pop:
                        filter:
                            any:
                                - population: false
                                - population: { max: 1000000 }
                        draw:
                            text-blend-order:
                                font:
                                    size: 16px

        populated-places:
            filter:
                kind: locality
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_populated_places
                    size: [[10,4px],[11,0px]]
                    sprite: townspot-xs-rev
                    buffer: 8px
                    priority: 30
                    text:
                        visible: global.text_visible_populated_places
                        buffer: 3px
                        font:
                            fill: global.text_fill
                            size: [[5, 9px], [8, 10px], [12, 11px]]
                text-blend-order:
                    visible: global.text_visible_populated_places
                    buffer: 10px
                    font:
                        fill: global.text_fill
                        size: [[5, 9px], [8, 10px], [12, 11px]]

            #
            # NOTE: you'd think no-townspot would be the way to go, but icons with size 0px seems to have a bug to also hide the text :(
            #
            # no-townspot:
            #     filter: { $zoom: { min: 11 } }
            #     draw:
            #         mapzen_icon_library:
            #             size: 0px
            #             text:
            #                 anchor: center
            #
            # NOTE: So instead we play a shell game with symbolizers per zoom
            #
            _icons_later:
                filter: { $zoom: { min: 11 } }
                draw:
                    mapzen_icon_library:
                        visible: false
                    text-blend-order:
                        visible: global.text_visible_populated_places

            _text_early:
                filter: { $zoom: { max: 11 } }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            z8-50k-below:
                filter: { $zoom: [8,9], population: { min: 10000, max: 50000 } }
                draw:
                    mapzen_icon_library:
                        buffer: 25px
                        #color: red
                        #visible: false
            z9-10k-below:
                filter: { $zoom: [8,9], population: { max: 10000 } }
                draw:
                    mapzen_icon_library:
                        buffer: 18px
                        #color: blue
                        #visible: false
            z9-no-population:
                filter: { $zoom: [8,9], population: false }
                draw:
                    mapzen_icon_library:
                        buffer: 10px
                        #color: yellow
                        #visible: false

            sorry-denver:
                filter:
                    $zoom: [3]
                    name: [Denver]
                draw:
                    mapzen_icon_library:
                        visible: false

            halo-populated-places:
                filter:
                    $zoom: { min: 8 }
                draw:
                    mapzen_icon_library:
                        text:
                            font:
                                fill: global.text_fill
                                stroke: { color: global.text_stroke, width: 4px }
                    text-blend-order:
                        font:
                            fill: global.text_fill
                            stroke: { color: global.text_stroke, width: 4px }

            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    mapzen_icon_library:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 6
                        text:
                            font:
                                size: [[2,11px],[6,17px],[8,19px],[12,21px],[13,0px]]
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,17px],[8,19px],[12,21x],[13,0px]]
                z9-bold:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 5
                        text-blend-order:
                            priority: 5
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    mapzen_icon_library:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 7
                        text:
                            font:
                                size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                z9-semibold:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 6
                        text-blend-order:
                            priority: 6
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    mapzen_icon_library:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 9
                        text:
                            font:
                                size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                z9-semibold:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 8
                        text-blend-order:
                            priority: 8
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    mapzen_icon_library:
                        size: [[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 11
                        text:
                            font:
                                size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 10
                        text-blend-order:
                            priority: 10
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    mapzen_icon_library:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m-rev
                        priority: 13
                        text:
                            font:
                                size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 12
                        text-blend-order:
                            priority: 12
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    mapzen_icon_library:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m-rev
                        priority: 15
                        text:
                            font:
                                size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 14
                        text-blend-order:
                            priority: 14
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    mapzen_icon_library:
                        size: [[8,5px],[9,5px],[10,6px],[11,0px]]
                        sprite: townspot-s-rev
                        priority: 17
                        text:
                            font:
                                size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        mapzen_icon_library: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-m
                            priority: 16
                        text-blend-order:
                            priority: 16
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    mapzen_icon_library:
                        size: [[8,5px],[9,5px],[10,5px],[11,0px]]
                        sprite: townspot-s-rev
                        priority: 19
                        text:
                            font:
                                size: [[9, 10px], [14, 12px], [15, 0px]]
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 18
                        text-blend-order:
                            priority: 18
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    mapzen_icon_library:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 21
                        text:
                            font:
                                size: [[9, 10px], [14, 12px], [15, 0px]]
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10, 5px], [11, 0px]]
                            sprite: capital-s
                            priority: 20
                        text-blend-order:
                            priority: 20
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    mapzen_icon_library:
                        size: [[8, 4px], [9, 4px], [10, 4px], [11, 0px]]
                        sprite: townspot-xs-rev
                        priority: 23
                        text:
                            font:
                                size: [[9, 10px], [14, 12px], [15, 0px]]
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 22
                        text-blend-order:
                            priority: 22
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    mapzen_icon_library:
                        size: [[8, 4px], [9, 4px], [10, 4px], [11, 0px]]
                        sprite: townspot-xs-rev
                        priority: 25
                        text:
                            font:
                                size: [[9, 10px], [14, 12px], [15, 0px]]
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10, 5px], [11, 0px]]
                            sprite: capital-s
                            priority: 24
                        text-blend-order:
                            priority: 24
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    mapzen_icon_library:
                        size: [[8, 4px], [9, 4px], [10, 4px], [11, 0px]]
                        sprite: townspot-xs-rev
                        priority: 27
                        text:
                            font:
                                size: [[9, 10px], [14, 12px], [15, 0px]]
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10, 5px], [11, 0px]]
                            sprite: capital-s
                            priority: 26
                        text-blend-order:
                            priority: 26
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    mapzen_icon_library:
                        size: [[8, 4px], [9, 4px], [10, 4px], [11, 0px]]
                        sprite: townspot-xs-rev
                        priority: 28
                        text:
                            font:
                                size: [[9, 10px], [14, 11px], [15, 0px]]
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        mapzen_icon_library:
                            size: [[10, 5px], [11, 0px]]
                            sprite: capital-s
                            priority: 27
                        text-blend-order:
                            priority: 27


        neighbourhoods:
            filter:
                all:
                    - kind:
                        - borough
                        - macrohood
                        - neighbourhood
                        #- microhood       # until Tenderloin microhoods are cleaned up, ban this placetype
                    - $zoom: { min: 10, max: 17 }
                    - is_landuse_aoi: false
                    - function() { return (feature.min_zoom <= ($zoom+0.5) && feature.max_zoom >= ($zoom+1)) }
            draw:
                text-blend-order:
                    visible: global.text_visible_neighbourhoods_e
                    priority: 29
                    buffer: 8px
                    text_wrap: 10
                    max_lines: 2
                    font:
                        fill: global.text_fill
                        size: [[11, 9px], [12, 10px], [13, 12px], [14, 16px], [16, 24px]]
                        weight: normal
                        transform: uppercase
                        stroke: { color: global.text_stroke, width: [[12, 3px], [16, 6px]] }

            z13-up:
                filter:
                    $zoom: { min: 13 }
                draw:
                    text-blend-order:
                        font:
                            weight: 300

                low_quality_kind_tile_rank:
                    filter:
                        kind_tile_rank: { min: 8 }
                    draw:
                        text-blend-order:
                            visible: false

                z14-up:
                    filter:
                        $zoom: { min: 14 }
                    draw:
                        text-blend-order:
                            text_wrap: 9
                            visible: global.text_visible_neighbourhoods

                    z15-up:
                        filter:
                            $zoom: { min: 15 }
                            min_zoom: { min: 15 }
                        draw:
                            text-blend-order:
                                priority: 19
                                font:
                                    size: 13px

    pois:
        data: { source: mapzen, layer: pois }
        #visible: global.label_visible_poi_landuse
        filter:
            all:
                - not: { kind: [building, address, farm, tree, apron, residential, commercial, industrial] }
                # White list a few kinds to "always" show per the tile zoom inclusion, else test feature's min_zoom
                #- function() { return feature.min_zoom <= $zoom }
                - function() { if( feature.kind == 'restaurant' || feature.kind == 'landmark' || feature.kind == 'cafe' ) { return true } else { return feature.min_zoom <= $zoom } }
        draw:
            mapzen_icon_library:
                visible: global.icon_visible_poi_landuse
                size: global.icon_size
                sprite: function() { return feature.kind; }
                sprite_default: generic
                interactive: global.sdk_interactive
                priority: 65 #function() { return (feature.min_zoom && Math.floor(feature.min_zoom * 1000)) || 65; }
                repeat_group: abc
                buffer: 3px
                text:
                    visible: global.text_visible_poi_landuse
                    text_source: global.ux_language_text_source
                    buffer: 3px
                    text_wrap: 18
                    max_lines: 3
                    font:
                        family: global.text_font_family
                        weight: normal
                        fill: global.text_fill_pois
                        size: [[13, 10px], [14, 11px], [17, 12px], [19, 12px], [20, 14px]]
                        stroke: { color: global.text_stroke, width: [[12, 3px],[16, 4px]] }
        # improve legibility at high zooms
        poi_labels-z18:
            filter: { $zoom: { min: 18 } }
            draw:
                mapzen_icon_library:
                    text:
                        # some pois have really long names
                        max_lines: 5
                        font:
                            weight: 600

        # source icon sprite from something other than kind
        sports-pitch:
            filter: { kind: [grass, pitch] }
            draw:
                mapzen_icon_library:
                    sprite: function() { return feature.kind_detail; }
                    # needs a better recreation icon, so just use generic (default) for now
                    #sprite_default: sports
        place_of_worship:
            filter:
                kind: [place_of_worship, wayside_chapel]
            draw:
                mapzen_icon_library:
                    sprite: function() { return feature.religion; }
                    sprite_default: place_of_worship
        # TODO: some or all of this may be unnecessary for the sprite, but is necessary for the early filter
        building-icon:
            filter:
                kind: [apartments, auditorium, building, hangar, manor, recreation_center, retirement_home, terminal]
            draw:
                mapzen_icon_library:
                    sprite: building
            early:
                filter:
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [14], area: { max: 200000 } }
                        - { $zoom: [15], area: { max: 20000 } }
                        - { $zoom: [16], area: { max: 5000 } }
                        - { $zoom: [17], area: { max: 1000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
        #end different icon sprites

        #most POI icons without name should be hidden, except these
        no-name:
            filter: { name: false }
            draw:
                mapzen_icon_library:
                    visible: false
            # eg park polygons in SF that have area but no name, sigh
            no-name-no-area:
                filter:
                    kind: true
                    name: false
                draw:
                    mapzen_icon_library:
                        visible: false
            sports-pitch:
                filter:
                    $zoom: { min: 17 }
                    kind: [grass, pitch]
                    kind_detail: [baseball, basketball, football, hockey, soccer, tennis]
                draw:
                    mapzen_icon_library:
                        visible: global.icon_visible_poi_landuse_e
                        priority: 69
            z17:
                filter:
                    $zoom: { min: 17 }
                    kind: [parking]
                draw: { mapzen_icon_library: { visible: global.icon_visible_poi_landuse_e } }
            z18:
                # for different styles, different sets
                # since [picnic_site] doesn't have bubble-wrap icon, it's omitted here
                filter:
                    $zoom: { min: 18 }
                    kind: [drinking_water, information, playground, toilets, traffic_signals]
                draw: { mapzen_icon_library: { visible: global.icon_visible_poi_landuse_e } }
            z19:
                filter:
                    $zoom: { min: 19 }
                    kind: [bicycle_parking]
                draw: { mapzen_icon_library: { visible: global.icon_visible_poi_landuse_e } }

        # NOTE: all natural_* should only be in landuse layer
        suppress icon-always:
            filter:
                kind: [natural_forest, natural_park, natural_wood]
            draw:
                mapzen_icon_library:
                    size: 0px
                    priority: 100
                    text:
                        font:
                            fill: global.text_fill_pois2
                            style: italic
                            size: 11px
        suppress-icon-z17:
            filter:
                $zoom: { min: 17 }
                kind: [common, grass, houseboat, pedestrian, railway, ship, wetland]
            draw:
                mapzen_icon_library:
                    size: 0px
                    #visible: false
                    text: { font: { style: italic } }

        # the server should be setting better values here
        z-server-friend:
            hide-until-z12-any:
                filter:
                    kind: [landmark, museum, prison]
                    $zoom: { max: 12 }
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z14-any:
                filter:
                    kind: [natural_forest, natural_park, natural_wood, post_office]
                    $zoom: { max: 14 }
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z15-any:
                filter:
                    $zoom: { max: 15 }
                    kind: [cafe, restaurant]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z15-no-area:
                filter:
                    area: false
                    $zoom: { max: 15 }
                    kind: [park]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z15-with-area:
                filter:
                    area: true
                    $zoom: { max: 15 }
                    kind: [nursing_home]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z16-any:
                filter:
                    kind: [fire_station, grass, peak, police, tram_stop]
                    $zoom: { max: 16 }
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z16-no-area:
                filter:
                    area: false
                    kind: [allotments, college, garden, university]
                    $zoom: { max: 16 }
                draw:
                    mapzen_icon_library:
                        visible: false
            # no POIs for commercial, residential
            hide-until-z17-any:
                filter:
                    $zoom: { max: 17 }
                    kind: [bank, bus_stop, car_sharing, wood]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z17-with-area:
                filter:
                    area: true
                    $zoom: { max: 17 }
                    kind: [common, grass, houseboat, pedestrian, pitch, railway, ship, wetland]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z17-no-area:
                filter:
                    area: false
                    $zoom: { max: 17 }
                    # note: atm and drinking_water appear hear and in area versions
                    kind: [accountant, administrative, advertising_agency, animal, architect, association, atm, bakery, bed_and_breakfast, bicycle, bicycle_parking, bicycle_rental_station, books, butcher, car, car_repair, chalet, clothes, company, computer, consulting, convenience, doityourself, drinking_water, dry_cleaning, educational_institution, emergency_phone, employment_agency, estate_agent, fashion, financial, florist, foundation, gift, government, greengrocer, guest_house, hairdresser, hostel, hotel, insurance, it, jewelry, lawyer, mast, memorial, mobile_phone, motel, newspaper, ngo, notary, optician, parking, pet, physician, playground, political_party, post_box, religion, research, subway_entrance, tax_advisor, telecommunication, telephone, theatre, therapist, toilets, traffic_signals, travel_agent, water_tower]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z18-any:
                filter:
                    kind: [atm, bus_stop, drinking_water]
                    $zoom: { max: 18 }
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z18-no-area:
                filter:
                    $zoom: { max: 18 }
                    area: false
                    kind: [bench, parking, waste_basket]
                draw:
                    mapzen_icon_library:
                        visible: false
            hide-until-z19-any:
                filter:
                    $zoom: { max: 19 }
                    kind: [bicycle_parking, burial_vault, car_sharing]
                draw:
                    mapzen_icon_library:
                        visible: false

            # hide based on kind and area filters
            military-early:
                filter:
                    kind: [military]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [8], area: { max: 50000000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            university-early:
                filter:
                    kind: [university, college]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [11], area: { max: 2000000 } }
                        - { $zoom: [12], area: { max: 500000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            school-early:
                filter:
                    kind: [school, kindergarten]
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: [13], area: { max: 100000 } }
                        - { $zoom: [14], area: { max: 50000 } }
                        - { $zoom: [15], area: { max: 10000 } }
                        - { $zoom: [16], area: { max: 5000 } }
                        - { $zoom: [17], area: { max: 2000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            garden-area-early:
                filter:
                    kind: [garden, allotments]
                    any:
                        # limit show smaller landuse areas to higher zooms
                        - { $zoom: [12], area: { max: 500000 } }
                        - { $zoom: [13], area: { max: 100000 } }
                        - { $zoom: [14], area: { max: 10000 } }
                        - { $zoom: [15], area: { max: 5000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            cemetery-early:
                filter:
                    kind: [cemetery]
                    # limit show smaller landuse areas to higher zooms
                    any:
                        - { $zoom: [12], area: { max: 3000000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            golf_course-early:
                filter:
                    kind: golf_course
                    any:
                        - { $zoom: [12], area: { max: 2500000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            office-early:
                filter:
                    - { kind: [insurance, office, company], $zoom: [15], area: { max: 10000 } }
                    - { kind: [insurance, office, company], $zoom: [16], area: { max: 5000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            landuse-labels-green-areas-not-national-park:
                filter:
                    kind: [park, conservation, protected_area, nature_reserve, forest, grass]
                    any:
                    # show labels for smaller landuse areas at higher zooms
                    - { $zoom: { max: 6 }, area: true }
                    - { $zoom: [6],    area: { max: 5000000000 } }
                    - { $zoom: [7],    area: { max: 5000000000 } }
                    - { $zoom: [8],    area: { max: 1000000000 } }
                    - { $zoom: [9],    area: { max: 100000000 } }
                    - { $zoom: [10],   area: { max: 50000000 } }
                    - { $zoom: [11],   area: { max: 25000000 } }
                    - { $zoom: [12],   area: { max: 5000000 } }
                    - { $zoom: [13],   area: { max: 200000 } }
                    - { $zoom: [14],   area: { max: 50000 } }
                    - { $zoom: [15],   area: { max: 10000 } }
                    - { $zoom: [16],   area: { max: 1000 } }
                draw:
                    mapzen_icon_library:
                        visible: false
                wilderness-areas-early:
                    filter: function() { return $zoom < 9 && feature.name && (feature.name.indexOf("Wilderness") > -1 || feature.name.indexOf("BLM") > -1 || feature.protect_class == '1' || feature.protect_class == '1a' || feature.protect_class == '1b' ); }
                    draw:
                        mapzen_icon_library:
                            visible: false
                not-national-park:
                    filter: function() { return feature.name && !((feature.name.indexOf("National Park") > -1) || feature.name.indexOf("National Monument") > -1); }
                    early:
                        filter: { $zoom: { max: 8 } }
                        draw:
                            mapzen_icon_library:
                                visible: false
            landuse-labels-not-any-above:
                filter:
                    $zoom: { max: 6 }
                    not: { kind: [aerodrome, airport, allotments, aquarium, attraction, battlefield, beach, cemetery, college, conservation, forest, garden, glacier, golf_course, grass, kindergarten, landmark, maze, national_park, nature_reserve, park, playground, protected_area, resort, school, stadium, station, theme_park, university, winery, winter_sports, zoo] }
                draw:
                    mapzen_icon_library:
                        visible: false
            glacier:
                filter: { $zoom: { max: 14 }, kind: glacier, area: false }
                draw:
                    mapzen_icon_library:
                        visible: false

        # set special priority, sprite, and text styles per kind
        has-area:
            filter: { area: true }
            draw:
                mapzen_icon_library:
                    priority: 41

        national-park-protected-areas:
            filter:
                kind: [national_park, battlefield]
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    sprite: park
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_park
                            style: italic
            # large park icon
            # z14-parks:
            #     filter: { $zoom: { min: 14 } }
            #     draw:
            #         mapzen_icon_library:
            #             sprite: park-l
            #             size: [[14,24px],[16,32px]]
        parks:
            filter:
                - kind: [park, conservation, grass]
                - { kind: protected_area, not: { protect_class: [6, '6'] } }
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    sprite: park
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_park
                            style: italic
            only-text-later:
                filter: { kind: [grass], $zoom: { min: 16 } }
                draw:
                    mapzen_icon_library:
                        size: 0px
        forest:
            filter:
                - kind: forest
                - { kind: protected_area, protect_class: [6, '6'] }
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    sprite: forest
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_park
                            style: italic
        beach:
            filter:
                kind: [beach]
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    text:
                        visible: global.text_visible_landuse_green
                        font:
                            fill: global.text_fill_beach
        airport:
            filter:
                kind: [airport, aerodrome]
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_landuse_green
                    size: global.icon_size_green
                    priority: 42
                    text:
                        text_source: global.ux_language_text_source_iata
                        visible: global.text_visible_landuse_green
            early:
                filter: { $zoom: [9,10,11] }
                draw: { mapzen_icon_library: { text: { text_source: iata } } }
        enclosure-related:
            filter:
                kind: [enclosure, animal]
            draw:
                mapzen_icon_library:
                    priority: 43
                    size: 0px
                    #: dot-black
                    text:
                        text_wrap: 10
                        font:
                            style: italic
        glacier:
            filter:
                kind: glacier
            draw:
                mapzen_icon_library:
                    size: 0px
                    #visible: false
                    text:
                        visible: true
                        priority: 44
                        text_wrap: 10
                        font:
                            style: italic
                            fill: global.text_fill_park

        landuse-labels-not-any-above:
            filter:
                not: { kind: [aerodrome, airport, allotments, aquarium, attraction, battlefield, beach, cemetery, college, conservation, forest, garden, glacier, golf_course, grass, kindergarten, landmark, maze, national_park, nature_reserve, park, playground, protected_area, resort, school, stadium, station, theme_park, university, winery, winter_sports, zoo] }
            draw:
                mapzen_icon_library:
                    priority: 43

        building-like:
            filter: { kind: [commercial,residential,warehouse,public,dormitory], osm_relation: false }
            draw:
                mapzen_icon_library:
                    sprite: building

        station-train-subway:
            filter: { kind: [station, train_station] }
            draw:
                mapzen_icon_library:
                    visible: global.icon_visible_station
                    size: [[13, 12px], [14, 12px], [15, 16px], [17, 18px], [18, 20px]]
                    priority: 42
                    text:
                        visible: global.text_visible_station
            station-early:
                filter:
                    $zoom: { max: 11 }
                draw:
                    mapzen_icon_library:
                        visible: false
            # for a transit style we'd want to see **all**, so don't move this above (it's special to this style)
            low-priority-early:
                filter: { kind_tile_rank: { min: 5 }, $zoom: { min: 0, max: 13 } }
                draw:
                    mapzen_icon_library:
                        visible: false
            low-priority-early-z13:
                filter: { kind_tile_rank: { min: 5 }, $zoom: [13] }
                draw:
                    mapzen_icon_library:
                        visible: false
            low-priority-early-z14:
                filter: { kind_tile_rank: { min: 7 }, $zoom: [14] }
                draw:
                    mapzen_icon_library:
                        text: { visible: false }

        garden-no-area-early:
            filter: { kind: [garden, allotments], $zoom: [16], area: false }
            draw:
                mapzen_icon_library:
                    priority: 45
                    size: 14px
                    text:  { font: { size: 10px, style: italic } }
        garden-no-area-later:
            filter: { kind: [garden, allotments], $zoom: { min: 17 }, area: false }
            draw:
                mapzen_icon_library:
                    priority: 45
                    size: 16px
                    text:  { font: { size: 11px, style: italic } }
        gate:
            filter: { kind: gate, name: true  }
            draw: { mapzen_icon_library: { sprite: generic } }

        parking-labels:
            filter:
                kind: [parking]
                $zoom: { min: 18 }
            draw:
                mapzen_icon_library:
                    text:
                        visible: global.text_visible_poi_landuse
                        font:
                            size: 10px
        tower:
            filter: { kind: [tower], label_placement: true }
            draw:
                mapzen_icon_library:
                    size: 0px
                    #visible: false
                    text:
                        font:
                            style: italic

        bus_stop:
            filter:
                kind: [bus_stop]
            draw:
                mapzen_icon_library:
                    size: [[18,12px],[20,18px]]
                    text:
                        optional: true
                        font:
                            size: 11px
            early:
                filter: { $zoom: { max: 19 } }
                draw:
                    mapzen_icon_library:
                        text:
                            visible: false

        airport-gate:
            filter: { kind: aeroway_gate }
            draw:
                mapzen_icon_library:
                    visible: false
                text-blend-order:
                    visible: global.text_visible_airport_gate
                    text_source: ref
                    priority: 63
                    font:
                        fill: global.text_fill_exits
                        size: [[16,9px],[17,12px],[20,14px]]
            later:
                filter: { $zoom: { min: 19 } }
                draw:
                    mapzen_icon_library:
                        text:
                            font:
                                weight: 600

        highway-exit:
            filter: { kind: motorway_junction, $zoom: { min: 14 } }
            draw:
                mapzen_icon_library:
                    visible: false
                text-blend-order:
                    visible: global.text_visible_exits
                    text_source: ref
                    priority: 63
                    font:
                        family: Montserrat
                        fill: global.text_fill_exits
                        size: [[12,9px],[15,12px],[17,14px]]
                        stroke: { color: global.text_stroke, width: [[12,2px],[14,3px],[15,3px]] }
            later:
                filter: { $zoom: { min: 16 } }
                draw:
                    mapzen_icon_library:
                        text:
                            font:
                                weight: 600



        transit-overlay-station-labels:
            filter:
                all:
                    - function() { return global.sdk_transit_overlay; }
                    - kind: [station, tram_stop, bus_station, subway_entrance, halt, stop, platform, bus_stop, stop_position ]
                    - any:
                        - area: false
                        - area: true
                          all:
                              - $geometry: point
                              - kind: true
            draw:
                mapzen_icon_library:
                    size: [[13, 12px], [16, 16px], [19, 20px]]
                    interactive: global.sdk_interactive
                    priority: 15
                    text:
                        buffer: 4px
                        move_into_tile: false # preserves text alignment w/icons in JS
                        #anchor: bottom
                        #offset: [[13, [0, 6px]], [16, [0, 8px]], [19, [0, 10px]]] # offset tracks alongside icon size (half icon height)
                        interactive: global.sdk_interactive
                        priority: 16
                        font:
                            fill: global.text_fill
                            weight: normal
                            size: 11px
                            stroke: { color: global.text_stroke_transit, width: 3px }
            poi_labels-z14:
                filter: { $zoom: [14] }
                draw: { mapzen_icon_library: { text: { font: { size: 11px } } } }
            poi_labels-z15:
                filter: { $zoom: [15,16,17] }
                draw: { mapzen_icon_library: { text: { font: { size: 12px, stroke: { width: 2 } } } } }
            poi_labels-z18:
                filter: { $zoom: [18,19] }
                draw: { mapzen_icon_library: { text: { font: { size: 12px, weight: 600, stroke: { width: 3 } } } } }
            poi_labels-z20-up:
                filter: { $zoom: { min: 20 } }
                draw: { mapzen_icon_library: { text: { font: { size: 14px, weight: 600, stroke: { width: 3 }  } } } }
            station-train-subway:
                filter: { kind: [station, train-station, train_station] } #, $zoom: { min: 13 }
                draw:
                    mapzen_icon_library:
                        sprite: train_station
                        size: [[13, 12px], [14, 14px], [15, 16px], [17, 20px]]
                        priority: 11
                        text:
                            #offset: [[13, [0, 6px]], [14, [0, 7px]],[15, [0, 8px]], [17, [0, 10px]]]
                            priority: 12
                low-priority-early:
                    filter: { kind_tile_rank: { min: 3 }, $zoom: { min: 0, max: 12 } }
                    draw:
                        mapzen_icon_library:
                            size: [[12, 5px], [14, 6px], [15, 16px]]
                            text:
                                visible: false
                    long-tail:
                        filter: { kind_tile_rank: { min: 10 }, $zoom: [10] }
                        draw:
                            mapzen_icon_library:
                                visible: false
                low-priority-early-z12:
                    filter: { kind_tile_rank: { min: 8 }, $zoom: [12] }
                    draw:
                        mapzen_icon_library:
    #                        visible: false
                            size: [[12, 5px], [14, 6px], [15, 16px]]
                            text:
                                visible: false
                low-priority-early-z13:
                    filter: { kind_tile_rank: { min: 8 }, $zoom: [13] }
                    draw:
                        mapzen_icon_library:
                            #visible: false
                            size: [[12, 8px], [14, 6px], [15, 16px]]
                            text:
                                visible: false
                low-priority-early-z14:
                    filter: { kind_tile_rank: { min: 7 }, $zoom: [14] }
                    draw:
                        mapzen_icon_library:
                            size: [[12, 10px], [14, 11px], [15, 16px]]
                            #visible: false
                            text:
                                visible: false
                late:
                    filter: { $zoom: { min: 16 } }
                    draw:
                        mapzen_icon_library:
                            text:
                                font:
                                    weight: 600
                                    size: 12px
            subway-early:
                filter: { is_subway: true, is_train: false, $zoom: { max: 12 } }
                draw:
                    mapzen_icon_library:
                        visible: false
                        text:
                            visible: false
            halt-early:
                filter: { kind: [halt,stop], $zoom: { max: 15 } }
                draw:
                    mapzen_icon_library:
                        size: [[15, 8px], [16, 18px]]
                        visible: global.sdk_transit_overlay
                        sprite: light_rail
                        text:
                            visible: false
            platform-early:
                filter: { kind: [platform] }
                draw:
                    mapzen_icon_library:
                        size: [[15, 8px], [16, 18px]]
                        visible: global.sdk_transit_overlay
                        sprite: generic
                        text:
                            visible: false
            tram-stop-early:
                filter: { kind: [tram_stop], $zoom: { max: 16 } }
                draw:
                    mapzen_icon_library:
                        size: [[13, 0px], [14, 7px], [15, 8px]]
                        visible: global.sdk_transit_overlay
                        sprite: light_rail
                        text:
                            visible: false
            tram-stop:
                filter: { kind: tram_stop, $zoom: { min: 16 } }
                draw:
                    mapzen_icon_library:
                        size: [[16, 12px], [17, 14px], [18, 18px]]
                        sprite: light_rail
                        #text:
                            #offset: [[13, [0, 6px]], [16, [0, 9px]]]
            bus-like-labels:
                filter:
                    kind: [platform, stop_position]
                draw:
                    mapzen_icon_library:
                        size: [[13, 8px], [16, 10px], [17, 12px], [18, 18px]]
                        sprite: bus_station
                        text:
                            interactive: global.sdk_interactive
                            font:
                                fill: global.text_fill
                                size: 12px
                                stroke: { color: global.text_stroke_transit, width: 4px }
            bus-station-labels:
                filter:
                    kind: [bus_station, bus_stop]
                    $zoom: { min: 16 }
                draw:
                    mapzen_icon_library:
                        size: [[13, 12px], [16, 18px]]
                        sprite: bus_station
                        priority: 17
                        text:
                            interactive: global.sdk_interactive
                            priority: 18
                            font:
                                fill: global.text_fill
                                size: 12px
                                stroke: { color: global.text_stroke_transit, width: 4px }
                bus_stop:
                    filter:
                        kind: [bus_stop]
                        $zoom: { max: 19 }
                    draw:
                        mapzen_icon_library:
                            size: [[13, 8px], [19, 18px]]
                            text:
                                visible: false
            subway-entrance:
                filter:
                    kind: [subway_entrance]
                draw:
                    mapzen_icon_library:
                        sprite: subway_entrance
                        size: [[17, 12px], [19, 14px]]
                        priority: 19
                        text:
                            #offset: [[17, [0, 6px]], [19, [0, 7px]]] # offset tracks alongside icon size (half icon height)
                            priority: 20
                            interactive: global.sdk_interactive
                            text_source: function() { if( feature.ref || feature.name ) { if( feature.ref && feature.name ) { return '[' + feature.ref + ']\n' + feature.name; } else { return feature.name; } } else { return "Entrance"; } }
                            font:
                                fill: global.text_fill
                                size: 12px
                                stroke: { color: global.text_stroke_transit, width: 4px }

    earth-labels:
        data: { source: mapzen, layer: earth }
        continent:
            filter: { kind: [continent], $zoom: { max: 5 } }
            draw:
                text-blend-order:
                    visible: global.text_visible_continent
                    text_source: global.ux_language_text_source_continent_stacked_only
                    text_wrap: false
                    font:
                        family: global.text_font_family
                        size: [[1, 11px], [3, 14px]]
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        transform: uppercase
            continent-spacer:
                filter: { $zoom: { min: 2 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_continent
        island:
            filter: { kind: [archipelago, island, islet] }
            draw:
                text-blend-order:
                    visible: global.text_visible_island
                    text_wrap: 10
                    font:
                        family: global.text_font_family
                        size: 12px
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        stroke: { color: global.text_stroke, width: 4px }

    landuse:
        data: { source: mapzen, layer: landuse }
        draw:
            polygons:
                order: global.feature_order
            lines:
                order: global.feature_order

        landuse-labels:
            filter:
                all:
                    - label_placement: true
                    - name: true
                    - $zoom: { min: 16 }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    #interactive: true
                    move_into_tile: true
                    priority: 100
                    visible: global.text_visible_landuse_generic
                    font:
                        fill: global.text_fill_landuse
                        family: global.text_font_family
                        style: italic
                        size: 11px
                        stroke: { color: global.text_stroke, width: 1px }

        #tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    color: global.park_forest
                    # todo: what is this?
                    order: 18
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        color: global.green1
                        visible: true
        #tier2:
        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: [2,3,5]}
            draw:
                polygons:
                    color: global.green1_w
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    color: global.park_forest
                    visible: true
                lines:
                    color: global.earth1
                    width: 2px

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    color: global.park_forest
                    visible: true
                lines:
                    color: global.earth1
                    width: [[7, 0px], [8, 1px], [10, 2px]]
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: national_park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        # gotta be a protected area to draw green, not just a landcover type
        farm:
            filter:
                kind: [farm, farmland]
                $zoom: { min: 10 }
            draw:
                polygons:
                    color: global.farm
                    visible: global.farm_v

        forest:
            filter: { kind: [forest, wood, natural_wood, natural_forest, natural_park], $zoom: { min: 10 }, not: { operator: [ "United States Forest Service"] } }
            draw:
                polygons:
                    color: global.park_forest
                    visible: true
                lines:
                    order: 28
                    color: global.earth1
                    width: 2px
            natural:
               filter: { kind: [natural_wood, natural_forest, natural_park] }
               draw:
                   lines:
                       visible: false
        # tier3:
        airport:
            filter:
                kind: aerodrome
            draw:
                polygons:
                    color: global.purple
                    visible: global.purple_v
        military:
            filter:
                kind: military
            draw:
                polygons:
                    color: global.purple
        university:
            filter:
                kind: [university, college]
            draw:
                polygons:
                    color: global.university

        # tier4:
        cemetery:
            filter:
                kind: cemetery
            draw:
                polygons:
                    color: global.green2

        golf_course:
            filter:
                kind: golf_course
            draw:
                polygons:
                    color: global.golf_course

        hospital:
            filter:
                kind: hospital
            draw:
                polygons:
                    color: global.hospital

        industrial:
            filter:
                kind: industrial
            draw:
                polygons:
                    color: global.industrial

        power:
            filter: { kind: [plant, generator, substation] }
            draw:
                polygons:
                    color: global.grey1

        railway:
            filter:
                kind: railway
            draw:
                polygons:
                    color: global.grey1

        sports_centre:
            filter:
                kind: sports_centre
            draw:
                polygons:
                    color: global.sports_centre

        recreation_ground:
            filter:
                kind: recreation_ground
            draw:
                polygons:
                    color: global.recreation
        retail:
            filter:
                kind: retail
            draw:
                polygons:
                    color: global.grey1
                    visible: global.grey1_v
        stadium:
            filter:
                kind: stadium
            draw:
                polygons:
                    color: global.orange1
        zoo:
            filter:
                kind: [zoo, wildlife_park]
            draw:
                polygons:
                    color: global.green2
        winter_sports:
            filter:
                kind: winter_sports
            draw:
                polygons:
                    color: global.grey8
                    visible: global.grey8_v

        man-made:
            filter: { kind: [pier,wastewater_plant,works,bridge,tower,breakwater,water_works,groyne,dike,cutline] }
            draw:
                polygons:
                    color: global.grey1
            pier:
                filter: { kind: [pier,bridge,breakwater,groyne,dike,cutline] }
                draw:
                    polygons:
                        color: global.earth1

        # tier5:
        tourism-related:
            filter:
                all:
                    - kind:
                        - theme_park
                        - resort
                        - aquarium
                        - winery
                        - maze
            draw:
                polygons:
                    color: global.tourism
        beach:
            filter:
                kind: beach
            draw:
                polygons:
                    color: global.beach

        # tier6:
        garden:
            filter:
                kind: garden
            draw:
                polygons:
                    color: global.green2

        parking:
            filter:
                all:
                    - kind: parking
                    - $zoom: { min: 14 }
                any:
                    - { $zoom: { min: 14 }, area: { min: 10000 } }
                    - { $zoom: { min: 15 }, area: { min: 5000 } }
            draw:
                polygons:
                    color: global.grey1
                    visible: global.grey1_v
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    polygons:
                        color: global.grey1_e

        pedestrian:
            filter:
                kind: [pedestrian, common, footway]
            draw:
                polygons:
                    color: global.grey7
                    visible: global.grey7_v

            green-stuff:
                filter:
                    surface: [grass]
                draw:
                    polygons:
                        color: global.grass

        pitch:
            filter: { kind: pitch }
            draw:
                polygons:
                    color: global.orange2
                lines:
                    order: global.feature_order
                    color: global.pitch_o
                    width: [[14, 0px], [15, 1px], [16, 1m]]

        place_of_worship:
            filter:
                kind: place_of_worship
            draw:
                polygons:
                    color: global.grey1
                    visible: global.grey1_v

        playground:
            filter:
                kind: playground
            draw:
                polygons:
                    color: global.playground

        school:
            filter:
                kind: school
            draw:
                polygons:
                    color: global.school

        minor-landuse:
            filter:
                kind:
                    - attraction
                    - artwork
                    - wilderness_hut
                    - hanami
            draw:
                polygons:
                    color: global.minor_landuse
                outline:
                    style: lines
                    order: global.feature_order
                    color: global.gray1_e
                    width: [[14, 0px], [15, 1px], [16, 0.5m]]

        landuse-not-filtered:
            # runways and taxiways are also in the roads layer as lines
            # these ones are probably duplicate features, but have AREA (a good thing)
            filter:
                kind:
                    - runway
                    - apron
                    - roller_coaster
                    - amusement_ride
                    - summer_toboggan
                    - trail_riding_station
                    - water_slide
                    - carousel
                    - animal
                    - enclosure
                    - petting_zoo
                    - aviary
            draw:
                polygons:
                    order: global.feature_order

            runway:
                filter:
                    kind: runway
                draw:
                    polygons:
                        color: global.runway
            apron:
                filter:
                    kind: apron
                    $zoom: { min: 15}
                draw:
                    polygons:
                        color: global.grey1
                        visible: global.grey1_v

            minor-amusement-park-landuse:
                filter:
                    kind:
                        - roller_coaster
                        - amusement_ride
                        - summer_toboggan
                        - trail_riding_station
                        - water_slide
                        - carousel
                draw:
                    polygons:
                        color: global.grey6_b
                        visible: true
                    lines:
                        color: global.grey1_e
                        width: [[14, 0px], [15, 1px], [16, 0.5m]]

            minor-zoo-landuse:
                filter:
                    kind:
                        - animal
                        - enclosure
                        - petting_zoo
                        - aviary
                draw:
                    polygons:
                        color: global.zoo
                        visible: true
                    lines:
                        color: global.zoo_o
                        width: [[14, 0px], [15, 1px], [16, 0.5m]]

        landuse_urban_area-early:
            filter:
                # This is from Natural Earth and only shows up from zoom(0,9)
                kind: urban_area
            draw:
                polygons:
                    visible: global.urban_v
                    order: global.feature_order
                    color: [[0, global.urban1], [7, global.urban1], [10, global.earth1]]

        city_walls:
            filter: { kind: city_wall }
            draw:
                lines:
                    color: global.city_wall
                    width: [[12, 0.75px], [14, 1.2px], [15, 2.0px], [16, 2.5px], [19, 5m]]

        retaining_wall:
            filter: { kind: retaining_wall }
            draw:
                lines:
                    color: global.retaining_wall
                    width: [[14, 0.5px], [15, 1.0px], [19, 1m]]

        fence:
            filter: { kind: fence }
            draw:
                lines:
                    color: global.fence
                    width: [[16, 0px], [17, 1px], [18, 1.5px], [20, 0.5m]]

        snow_fence:
            filter: { kind: snow_fence }
            draw:
                lines:
                    color: global.snow_fence
                    width: [[14, 0.5px], [15, 1.0px], [17, 2.0px], [19, 2m]]

#    transit-bus-roads:
#        data: { source: mapzen, layer: roads }
#        filter:
#            all:
#                - is_bus_route: true
#                - function() { return global.sdk_transit_overlay; }
#        draw:
#            lines:
#                interactive: false
#                color: [[13,[0,0,1,0.5]],[15,blue]]
#                width: [[11,0.5px],[12,0.8px],[16,1.25px],[18,1m]]
#                # let roads sort themselves past zoom 14
#                order: 488
#                # but give them all the same outline
#                outline:
#                    order: 487
