global:
    geometry_area_color: '#22D14000' # accent color + alpha
    geometry_line_color: '#44D14000'
    geometry_point_color: '#88D14000'
    track_color: '#44536dfe'
    track_color_record: '#44fe1616'
    old_track_color: '#22536dfe'

textures:
    pins:
        url: ''
        filtering: mipmap
        sprites: {}
    icons:
        url: ''
        filtering: mipmap
        sprites: { }
    pin_dot:
        url: images/pin_dot@2x.png
        filtering: mipmap
        density: 5

styles:
    # quest pins & dots
    pin-selection:
        base: points
        blend: overlay
        blend_order: 4
    selected-pin-icons:
        base: points
        texture: pins
        blend: overlay
        blend_order: 3
    pin-icons:
        base: points
        texture: pins
        blend: overlay
        blend_order: 2
    pin-dots:
        base: points
        texture: pin_dot
        blend: overlay
        blend_order: 1
    # highlighted geometry (when tapping on quest etc.)
    geometry-lines-animate:
        base: lines
        blend: overlay
        shaders:
            blocks:
                color: |
                    color.a = min(max(sin(u_time * 3.0) / 2.0 + 0.5, 0.125), 0.875) * 0.5 + 0.125;
                width: |
                    width *= min(max(-sin(u_time * 3.0) / 2.0 + 0.5, 0.125), 0.875) + 0.625;
    geometry-lines:
        base: lines
        blend: overlay
    geometry-polygons:
        base: polygons
        blend: overlay
    geometry-points:
        base: points
        blend: overlay
        blend_order: 2
    # GPS track
    track-lines:
        base: lines
        blend: overlay
    # styled map data shown in overlays
    map_data-icons:
        base: points
        texture: icons
        blend: overlay
        blend_order: 2
    map_data-lines:
        base: lines
        blend: translucent
    map_data-steps-dashes:
        base: lines
        blend: translucent
        dash: [0.6,0.4]
    map_data-lines-dashed:
        base: lines
        blend: translucent
        dash: [2, 1.333]
    map_data-polygons:
        base: polygons
        blend: translucent
    map_data-points:
        base: points
        blend: translucent
        blend_order: 1
    map_data-lines-right:
        base: lines
        blend: translucent
        texcoords: true
        shaders:
            blocks:
                color: |
                    float x = smoothstep(0.49, 0.51, (v_texcoord.x - 0.5) * 2.0);
                    color.a = color.a * x;
    map_data-lines-left:
        base: lines
        blend: translucent
        texcoords: true
        shaders:
            blocks:
                color: |
                    float x = smoothstep(-0.49, -0.51, (v_texcoord.x - 0.5) * 2.0);
                    color.a = color.a * x;
    map_data-lines-right-dashed:
        base: lines
        blend: inlay
        texcoords: true
        shaders:
            blocks:
                color: |
                    float x = smoothstep(0.49, 0.51, (v_texcoord.x - 0.5) * 2.0);
                    float y = step(0.4, mod(v_texcoord.y, 1.0));
                    color.a = color.a * x * y;
    map_data-lines-left-dashed:
        base: lines
        blend: inlay
        texcoords: true
        shaders:
            blocks:
                color: |
                    float x = smoothstep(-0.49, -0.51, (v_texcoord.x - 0.5) * 2.0);
                    float y = step(0.4, mod(v_texcoord.y, 1.0));
                    color.a = color.a * x * y;
    downloaded_area:
        base: polygons
        blend: overlay
        texcoords: true
        shaders:
            blocks:
                color: |
                    float z = u_map_position.z;
                    color.a *= pow(max(1.0, z - 6.0) / (19.0 - 6.0), 2.0);
                    // for hatching effect:
                    float x = fract((v_texcoord.x + v_texcoord.y) * 50.0);
                    color.a *= step(0.75, x);
layers:
    # quest pins & dots
    streetcomplete_selected_pins:
        data: { source: streetcomplete_selected_pins }
        draw:
            selected-pin-icons:
                size: 66px
                sprite: function() { return feature.kind }
                sprite_default: quest
                collide: false
                offset: [-8px, -33px]
    streetcomplete_pins:
        data: { source: streetcomplete_pins }
        pins:
            filter: { $zoom: { min: 16 } }
            draw:
                pin-icons:
                    interactive: true
                    priority: function() { return 1.0 - feature.importance / 100000.0 }
                    order: function() { return 100000 + feature.importance }
                    repeat_group: pin
                    size: 66px
                    sprite: function() { return feature.kind }
                    sprite_default: quest
                    offset: [-8px, -33px]
        dots_no_collide:
            filter: { $zoom: { min: 16 } }
            draw:
                pin-dots:
                    priority: 1
                    order: 1
                    size: 16px
                    collide: false
                    offset: [-1.5px, -12px]
        dots:
            filter: { $zoom: { min: 14, max: 15.999 } }
            draw:
                pin-dots:
                    priority: 1
                    order: 1
                    repeat_group: pin_dot
                    size: 16px
                    collide: true
                    offset: [-1.5px, -12px]
    # highlighted geometry (when tapping on quest etc.)
    streetcomplete_geometry:
        data: { source: streetcomplete_geometry }
        line:
            filter: { type: [poly, line] }
            draw:
                geometry-lines-animate:
                    color: global.geometry_line_color
                    width: 9px
                    collide: false
                    order: 1000
                    cap: round
                    join: round
        poly:
            filter: { type: poly }
            draw:
                geometry-polygons:
                    color: global.geometry_area_color
                    collide: false
                    order: 1000
                    cap: round
                    join: round
        point:
            filter: { type: point }
            draw:
                geometry-points:
                    color: global.geometry_point_color
                    size: 24px
                    collide: false
                    order: 1000
    # streetcomplete_track and streetcomplete_track2 layers are exactly the same except the source.
    #  It is not possible in tangram to define a layer for several sources.
    streetcomplete_track:
        data: { source: streetcomplete_track }
        current:
            filter: { old: [false] }
            draw:
                track-lines:
                    color: |
                        function() { return feature.record ? global.track_color_record : global.track_color }
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
        old:
            filter: { old: [true] }
            draw:
                track-lines:
                    color: |
                        function() { return feature.record ? global.track_color_record : global.old_track_color }
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
    streetcomplete_track2:
        data: { source: streetcomplete_track2 }
        current:
            filter: { old: [false] }
            draw:
                track-lines:
                    color: |
                        function() { return feature.record ? global.track_color_record : global.track_color }
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
        old:
            filter: { old: [true] }
            draw:
                track-lines:
                    color: |
                        function() { return feature.record ? global.track_color_record : global.old_track_color }
                    width: [[14, 6px],[18, 12px]]
                    collide: false
                    join: round
                    order: 900
    # styled map data shown in overlays
    streetcomplete_map_data:
        data: { source: streetcomplete_map_data }
        # same as above but with collide=false, at ~max zoom
        point-no-collide:
            filter: { icon: true, $zoom: { min: 18 } }
            draw:
                map_data-icons:
                    interactive: true
                    priority: 1
                    collide: false
                    size: 34px
                    sprite: function() { return feature.icon }
                    text:
                        anchor: [right]
                        optional: true
                        text_source: text
                        max_lines: 2
                        font:
                            family: global.text_font_family
                            fill: global.text_fill_color
                            size: global.text_size
                            stroke: { color: global.text_stroke_color, width: 4px }
        # pure labels without icons do not render if specified in point style in tangram. Pure
        # text labels shall never collide
        label-no-icon:
            filter: { text: true, icon: false, $zoom: { min: 18 } }
            draw:
                text:
                    interactive: true
                    priority: 1
                    collide: false
                    text_source: text
                    font:
                        family: global.text_font_family
                        fill: global.text_fill_color
                        size: global.text_size
                        stroke: { color: global.text_stroke_color, width: 4px }
        line:
            filter: { type: [line], color: true, dashed: false }
            draw:
                map_data-lines:
                    interactive: true
                    color: function() { return feature.color; }
                    width: function() { return feature.width; }
                    order: function() { return 701 + Number(feature.layer)*5; }
                    cap: round
                    join: round
                    outline:
                        color: function() { return feature.strokeColor; }
                        width: 1m
                        order: function() { return 702 + Number(feature.layer)*5; }
        line-dashed:
            filter: { type: [line], color: true, dashed: true }
            draw:
                map_data-lines-dashed:
                      interactive: true
                      color: function() { return feature.color; }
                      width: function() { return feature.width; }
                      order: function() { return 701 + Number(feature.layer)*5; }
                      cap: round
                      join: round
                      outline:
                          color: function() { return feature.strokeColor; }
                          width: 1m
                          order: function() { return 702 + Number(feature.layer)*5; }
        steps-dashes:
            filter: { type: [line], color: true, steps: true }
            draw:
                map_data-steps-dashes:
                    order: function() { return 702 + Number(feature.layer)*5; }
                    cap: butt
                    color: function() { return feature.strokeColor; }
                    width: function() { return feature.width; }
        line-left:
            filter: { type: [line], colorLeft: true, dashedLeft: false }
            draw:
                map_data-lines-left:
                    interactive: true
                    color: function() { return feature.colorLeft; }
                    width: function() { return feature.width * 2.0 + 4.0; }
                    order: function() { return 700 + Number(feature.layer)*5; }
                    join: round
        line-right:
            filter: { type: [line], colorRight: true, dashedRight: false }
            draw:
                map_data-lines-right:
                    interactive: true
                    color: function() { return feature.colorRight; }
                    width: function() { return feature.width * 2.0 + 4.0; }
                    order: function() { return 700 + Number(feature.layer)*5; }
                    join: round
        line-left-dashed:
            filter: { type: [line], colorLeft: true, dashedLeft: true }
            draw:
                map_data-lines-left-dashed:
                    interactive: true
                    color: function() { return feature.colorLeft; }
                    width: function() { return feature.width * 2.0 + 4.0; }
                    order: function() { return 700 + Number(feature.layer)*5; }
                    join: round
        line-right-dashed:
            filter: { type: [line], colorRight: true, dashedRight: true }
            draw:
                map_data-lines-right-dashed:
                    interactive: true
                    color: function() { return feature.colorRight; }
                    width: function() { return feature.width * 2.0 + 4.0; }
                    order: function() { return 700 + Number(feature.layer)*5; }
                    join: round
        area:
            filter: { type: [poly] }
            draw:
                map_data-polygons:
                    interactive: true
                    color: function() { return feature.color; }
                    order: function() { return 703 + Number(feature.layer)*5; }
                    extrude: function() { return feature.height; }
                map_data-lines:
                    color: function() { return feature.strokeColor; }
                    order: function() { return 704 + Number(feature.layer)*5; }
                    extrude: function() { return feature.height; }
                    width: 1m
                    cap: round
                    join: round
    # downloaded area
    streetcomplete_downloaded_area:
        data: { source: streetcomplete_downloaded_area }
        draw:
            downloaded_area:
                order: 500
                color: [0.5, 0.5, 0.5, 0.3]
