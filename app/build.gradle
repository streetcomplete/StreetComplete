apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def MAPZEN_API_KEY = hasProperty('mapzenApiKey') ? '"' + mapzenApiKey + '"' : "null"

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release
    }
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    testOptions {
        unitTests.returnDefaultValues = true
    }

    defaultConfig {
        applicationId "de.westnordost.streetcomplete"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 901
        versionName "9.0"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        buildConfigField "String", "MAPZEN_API_KEY", MAPZEN_API_KEY
    }
    buildTypes {

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(keystorePropertiesFile))
    android.signingConfigs.release.storeFile = file(props['storeFile'])
    android.signingConfigs.release.storePassword = props['storePassword']
    android.signingConfigs.release.keyAlias = props['keyAlias']
    android.signingConfigs.release.keyPassword = props['keyPassword']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // debugging
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    // tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
    testImplementation 'org.objenesis:objenesis:2.6'
    testImplementation 'org.assertj:assertj-core:2.8.0'

    androidTestImplementation 'org.assertj:assertj-core:2.8.0'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'org.objenesis:objenesis:2.6'
    androidTestImplementation "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-dx:1.4"
    androidTestImplementation "com.crittercism.dexmaker:dexmaker-mockito:1.4"

    // dependency injection
    implementation 'com.google.dagger:dagger:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'

    // Android stuff
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:preference-v7:27.1.1'
    implementation 'com.android.support:preference-v14:27.1.1'
    implementation 'com.android.support:support-v13:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'

    // scheduling background jobs
    implementation 'com.evernote:android-job:1.1.12'

    // geometry
    implementation 'de.westnordost:countryboundaries:1.4'

    // talking with OSM Api
    implementation 'oauth.signpost:signpost-core:1.2.1.2'
    implementation ('de.westnordost:osmapi:3.3') {
        // it's already included in Android
        exclude group: 'net.sf.kxml', module: 'kxml2'
    }

    // widgets
    implementation 'me.grantland:autofittextview:0.2.1'
    implementation 'com.duolingo.open:rtl-viewpager:1.0.2'
    // versions above 1.1.0 (i.e. 1.1.3) have unsolved crash issues
    implementation 'com.github.florent37:viewtooltip:1.1.0'
    implementation 'com.android.support:exifinterface:27.1.1'

    // serialization
    implementation 'com.esotericsoftware:kryo:4.0.1'
    implementation 'org.objenesis:objenesis:2.6'

    // map and location
    implementation 'com.mapzen.tangram:tangram:0.9.6'
    implementation 'com.mapzen.android:lost:3.0.4'

    // config files
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.13'


    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task generateMetadata(type: Exec) {
    commandLine 'python', 'generateCountryMetadata.py'
    commandLine 'python', 'exportCountryGeometriesToGeoJson.py'
}
// rather not, otherwise all contributors that want to build need to have installed python and the
// dependencies I use for these scripts.
//preBuild.dependsOn(generateMetadata)
