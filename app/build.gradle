apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def MAPZEN_API_KEY = hasProperty('mapzenApiKey') ? '"' + mapzenApiKey + '"' : "null"

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release
    }
    compileSdkVersion 28
    testOptions {
        unitTests {
            returnDefaultValues = true
            all {
                useJUnit {
                    excludeCategories 'de.westnordost.streetcomplete.IntegrationTests'
                }
            }
        }
    }

    defaultConfig {
        applicationId "de.westnordost.streetcomplete"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1202
        versionName "12.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "MAPZEN_API_KEY", MAPZEN_API_KEY
    }
    buildTypes {

        release {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(keystorePropertiesFile))
    android.signingConfigs.release.storeFile = file(props['storeFile'])
    android.signingConfigs.release.storePassword = props['storePassword']
    android.signingConfigs.release.keyAlias = props['keyAlias']
    android.signingConfigs.release.keyPassword = props['keyPassword']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // debugging
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    // tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.assertj:assertj-core:2.8.0'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    // KotlinX Jetifier can't cope with bytebuddy-1.9 which is a dependency of mockito-android 2.23.+
    androidTestImplementation 'org.mockito:mockito-android:2.22.0'
    androidTestImplementation 'org.assertj:assertj-core:2.8.0'

    // dependency injection
    implementation 'com.google.dagger:dagger:2.14.1'
    kapt 'com.google.dagger:dagger-compiler:2.14.1'

    // Android stuff
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.core:core:1.0.2'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.fragment:fragment:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    // photos
    implementation 'androidx.exifinterface:exifinterface:1.0.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.core:core-ktx:1.0.2"

    // scheduling background jobs
    implementation 'android.arch.work:work-runtime:1.0.1'

    // geometry
    implementation 'de.westnordost:countryboundaries:1.5'

    implementation 'de.westnordost:osmfeatures-android:1.0'

    // talking with OSM Api
    implementation 'oauth.signpost:signpost-core:1.2.1.2'
    implementation ('de.westnordost:osmapi:3.3') {
        // it's already included in Android
        exclude group: 'net.sf.kxml', module: 'kxml2'
    }

    // widgets
    implementation 'me.grantland:autofittextview:0.2.1'
    implementation 'com.duolingo.open:rtl-viewpager:1.0.2'
    // versions above 1.1.0 (i.e. 1.1.3) have unsolved crash issues
    implementation 'com.github.florent37:viewtooltip:1.1.0'
    implementation 'androidx.exifinterface:exifinterface:1.0.0'

    // serialization
    implementation 'com.esotericsoftware:kryo:4.0.2'
    implementation 'org.objenesis:objenesis:2.6'

    // map and location
    implementation 'com.mapzen.tangram:tangram:0.9.6'
    implementation 'com.mapzen.android:lost:3.0.4'

    // config files
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.13'
}

task generateMetadata(type: Exec) {
    commandLine 'python', 'generateCountryMetadata.py'
    commandLine 'python', 'exportCountryGeometriesToGeoJson.py'
}

import groovy.json.JsonParserType
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

task downloadPresets {
    doLast {
        def targetDir = "src/main/assets/osmfeatures"
        def presetsUrl = new URL("https://raw.githubusercontent.com/openstreetmap/iD/master/data/presets/presets.json")
        def contentsUrl = new URL("https://api.github.com/repos/openstreetmap/iD/contents/dist/locales")

        new File("$targetDir/presets.json").withOutputStream { it << presetsUrl.openStream() }

        def slurper = new JsonSlurper()
        slurper.type = JsonParserType.INDEX_OVERLAY
        slurper.parse(contentsUrl, "UTF-8").each {
            if(it.type == "file") {
                def content = slurper.parse(new URL(it.download_url),"UTF-8")
                def presets = content.values()[0]?.presets?.presets
                if(presets) {
                    def json = unescapeUnicode(JsonOutput.prettyPrint(JsonOutput.toJson([presets: presets])))
                    new File("$targetDir/${it.name}").write(json, "UTF-8")
                }
            }
        }
    }
}

static def unescapeUnicode(String str) {
    def out = new StringWriter(str.length())
    def sz = str.length()
    def unicode = new StringBuilder(4)
    def hadSlash = false
    def inUnicode = false

    for(def i = 0; i < sz; ++i) {
        def ch = str.charAt(i)
        if (inUnicode) {
            unicode.append(ch)
            if (unicode.length() == 4) {
                int value = Integer.parseInt(unicode.toString(), 16)
                out.write((char)value)
                unicode.setLength(0)
                inUnicode = false
                hadSlash = false
            }
        } else if (hadSlash) {
            hadSlash = false
            if (ch == ('u' as char)) inUnicode = true
            else {
                out.write(92)
                out.write(ch)
            }
        } else if (ch == ('\\' as char)) {
            hadSlash = true
        } else {
            out.write(ch)
        }
    }

    if (hadSlash) out.write(92)
    return out.toString()
}


// rather not, otherwise all contributors that want to build need to have installed python and the
// dependencies I use for these scripts.
//preBuild.dependsOn(generateMetadata)
