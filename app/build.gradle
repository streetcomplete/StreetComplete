apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

def MAPZEN_API_KEY = hasProperty('mapzenApiKey') ? '"' + mapzenApiKey + '"' : "null";

android {
    signingConfigs {
        release
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    testOptions {
        unitTests.returnDefaultValues = true
    }

    defaultConfig {
        applicationId "de.westnordost.streetcomplete"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 8
        versionName "0.11"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        buildConfigField "String", "MAPZEN_API_KEY", MAPZEN_API_KEY
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(keystorePropertiesFile))
    android.signingConfigs.release.storeFile = file(props['storeFile'])
    android.signingConfigs.release.storePassword = props['storePassword']
    android.signingConfigs.release.keyAlias = props['keyAlias']
    android.signingConfigs.release.keyPassword = props['keyPassword']
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // tests (perhaps migrate to junit4 later if any features of it seem convenient or necessary)
    testCompile 'junit:junit:3.8.1'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.objenesis:objenesis:2.5.1'

    androidTestCompile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'org.objenesis:objenesis:2.5.1'
    androidTestCompile "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:1.4"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:1.4"

    // dependency injection
    compile 'com.google.dagger:dagger:2.5'
    apt 'com.google.dagger:dagger-compiler:2.5'

    // Android stuff
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:support-v13:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:design:25.3.1'

    // geometry
    compile 'com.vividsolutions:jts-core:1.14.0'

    // talking with OSM Api
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile ('de.westnordost:osmapi:1.7') {
        // it's already included in Android
        exclude group: 'net.sf.kxml', module: 'kxml2'
    }

    // widgets
    compile 'me.grantland:autofittextview:0.2.+'

    // serialization
    // Kryo uses Objenesis 2.2 which uses a class that has been removed for Android O.
    // see https://github.com/westnordost/StreetComplete/issues/286
    compile 'org.objenesis:objenesis:2.5.1'
    compile 'com.esotericsoftware:kryo:4.0.0'

    // map and location
    compile 'com.mapzen.tangram:tangram:0.7.1'
    compile 'com.mapzen.android:lost:3.0.2'

    // config files
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
}

task generateMetadata(type: Exec) {
    commandLine 'python','generateCountryMetadata.py', '../res/country_metadata/', 'src/main/assets/country_metadata/', 'Do not edit. Source files are in /res/country_metadata'
    commandLine 'python', 'exportCountryGeometriesToGeoJson.py', '../res/countryBoundaries.osm', 'src/main/assets/countryBoundaries.json'
}
// rather not, otherwise all contributors that want to build need to have installed python and the
// dependencies I use for these scripts.
//preBuild.dependsOn(generateMetadata)
